using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

public static class Cls
{
    public static string HtmlToPlainText(string html)
    {
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>";//matches: <br>,<br/>,<br />,<BR>,<BR/>,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = html;
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);

        return text;
    }

    public static DataSet NaverNews(string SearchStr)
    {
        string str = System.Web.HttpUtility.UrlEncode(SearchStr, System.Text.Encoding.UTF8);
        DataSet ds = new DataSet();
        String apiURL = "https://openapi.naver.com/v1/search/news.xml?query=" + str;

        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(apiURL);

        int seed = DateTime.Now.Millisecond;
        Random r = new Random(seed);

        int ranNum = r.Next();

        request.Method = "GET";

        if (ranNum % 4 == 0) { 
            request.Headers.Add("X-Naver-Client-Id", "MbZd5RTwx737EUZkTS4R"); //시영
            request.Headers.Add("X-Naver-Client-Secret", "E7u5wgKVW2"); //시영
        }
        else if (ranNum % 4 == 1)
        {
            request.Headers.Add("X-Naver-Client-Id", "lLk8wyiPEClhz4iSE5uS"); //동권
            request.Headers.Add("X-Naver-Client-Secret", "AO5aMsIpja");  //동권
        }
        else if (ranNum % 4 == 2)
        {
            request.Headers.Add("X-Naver-Client-Id", "QHyiah6SUKyP9THlnFZm"); //병수
            request.Headers.Add("X-Naver-Client-Secret", "QbAoDXqYoG");  //병수
        }
        else
        {
            request.Headers.Add("X-Naver-Client-Id", "MbZd5RTwx737EUZkTS4R"); //종근
            request.Headers.Add("X-Naver-Client-Secret", "E7u5wgKVW2"); //종근
        }


        HttpWebResponse response = (HttpWebResponse)request.GetResponse();

        StreamReader reader1 = new StreamReader(response.GetResponseStream());

        string page = reader1.ReadToEnd();
        StringReader sReader = new StringReader(page);

        System.Xml.XmlReader reader = System.Xml.XmlReader.Create((TextReader)sReader);

        ds.ReadXml(reader);
        return ds;
    }
    //Daum 은 뉴스 검색을 제공하고 있지 않습니다. '해당답변 뉴스는 계약 관계 때문에 문제가 많이 발생해서 막은거라 제공하기 어려울 것 같습니다. 
    //public static DataSet DaumNews(string SearchStr)
    //{
    //    String apiURL = "https://apis.daum.net/search/web?apikey=129f8f599040b8b48d7eb1c7f967d231&q=" + SearchStr + "&output=XML";

    //    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(apiURL);

    //    request.Method = "GET";
    //    request.Headers.Add("X-Naver-Client-Id", "MbZd5RTwx737EUZkTS4R"); //시영
    //    request.Headers.Add("X-Naver-Client-Secret", "E7u5wgKVW2"); // 시영
    //    //request.Headers.Add("X-Naver-Client-Id", "lLk8wyiPEClhz4iSE5uS");
    //    //request.Headers.Add("X-Naver-Client-Secret", "AO5aMsIpja");

    //    HttpWebResponse response = (HttpWebResponse)request.GetResponse();

    //    StreamReader reader1 = new StreamReader(response.GetResponseStream());

    //    string page = reader1.ReadToEnd();
    //    System.Data.DataSet ds = new System.Data.DataSet();

    //    StringReader sReader = new StringReader(page);

    //    System.Xml.XmlReader reader = System.Xml.XmlReader.Create((TextReader)sReader);

    //    ds.ReadXml(reader);
    //    return ds;
    //}

    public static DataSet DaumNews(string SearchStr)
    {
        DataSet ds = new DataSet();
        return ds;

        string url = "http://search.daum.net/search?w=news&cluster=n&q=" + SearchStr + "&sort=1";
        Panel pnl = new Panel();
        WebBrowser browser = new WebBrowser();
        browser.Parent = pnl;
        browser.Visible = false;
        pnl.Enabled = false;
        pnl.Focus();
        browser.Dock = DockStyle.Fill;
        browser.Navigate(url);

        ////Common.Form1 frm = new Common.Form1();
        ////frm.webBrowser1.Navigate(url);
        while (browser.IsBusy || browser.DocumentText.Length < 1) { Application.DoEvents(); }
        string _htmlSource = browser.DocumentText;
        //Cef.Initialize(new CefSettings());
        //string _htmlSource = _browser.GetSourceAsync(url);
        
        DataTable dt = new DataTable("item");
        ds.Tables.Add(dt);
        //frm.Show();
        //return ds;
        dt.Columns.Add("시간");
        dt.Columns.Add("키워드");
        dt.Columns.Add("제목");
        dt.Columns.Add("주소");

        DataRow dr;

        if (_htmlSource == "") return ds;

        if (_htmlSource.Contains(">뉴스</h2>"))
        {
            int idxName;
            int idxNameLast;
            idxName = _htmlSource.IndexOf("topQuery");
            idxNameLast = _htmlSource.IndexOf(";", idxName);

            int idxFirst;
            int idxNews;
            int idxLast;
            idxFirst = _htmlSource.IndexOf("뉴스</h2>");

            if (idxFirst == -1)
            {
                return ds;
            }

            if (_htmlSource.IndexOf("스타뉴스", idxFirst) > -1)
            {
                return ds;
            }

            idxNews = _htmlSource.IndexOf("f_eb desc", idxFirst);
            idxLast = _htmlSource.IndexOf("</p>", idxNews);

            int idxTitle;
            int idxTitle1;
            int idxidxTitleLast;
            idxTitle = _htmlSource.IndexOf("wrap_tit mg_tit", idxFirst);
            idxTitle1 = _htmlSource.IndexOf("_blank", idxTitle);
            idxidxTitleLast = _htmlSource.IndexOf("</a>", idxTitle1);

            int idxNewsTime;
            int idxLastTime;
            idxNewsTime = _htmlSource.IndexOf("f_nb date", idxFirst);
            idxLastTime = _htmlSource.IndexOf("전", idxNewsTime);

            int idxLink;
            int idxLastLink;
            idxLink = _htmlSource.IndexOf("a href=", idxTitle);
            idxLastLink = _htmlSource.IndexOf("class", idxLink);

            DataView dv = new DataView(ds.Tables["item"]);

            dv.RowFilter = "제목 = '" + HtmlToPlainText(_htmlSource.Substring(idxTitle1 + 8, idxidxTitleLast - idxTitle1 - 8)).Replace("'" , "''") + "'";
            if (dv.Count > 0)
            {
                return ds;
            }

            dr = dt.NewRow();
            dr["시간"] = DateTime.Now;
            dr["키워드"] = _htmlSource.Substring(idxName + 12, idxNameLast - idxName - 13);
            dr["제목"] = HtmlToPlainText(_htmlSource.Substring(idxTitle1 + 8, idxidxTitleLast - idxTitle1 - 8));
            dr["주소"] = _htmlSource.Substring(idxLink + 8, idxLastLink - idxLink - 10);

            dt.Rows.Add(dr);
        }
        return ds;
    }

    //Mid
    /// <summary>
    /// 문자열 원본의 지정한 위치에서 부터 추출할 갯수 만큼 문자열을 가져옵니다.
    /// </summary>
    /// <param name="sString">문자열 원본</param>
    /// <param name="nStart">추출을 시작할 위치</param>
    /// <param name="nLength">추출할 갯수</param>
    /// <returns>추출된 문자열</returns>
    public static string Mid(string sString, int nStart, int nLength)
    {
        string sReturn;

        //VB에서 문자열의 시작은 0이 아니므로 같은 처리를 하려면 
        //스타트 위치를 인덱스로 바꿔야 하므로 -1을 하여
        //1부터 시작하면 0부터 시작하도록 변경하여 준다.
        --nStart;

        //시작위치가 데이터의 범위를 안넘겼는지?
        if (nStart <= sString.Length)
        {
            //안넘겼다.

            //필요한 부분이 데이터를 넘겼는지?
            if ((nStart + nLength) <= sString.Length)
            {
                //안넘겼다.
                sReturn = sString.Substring(nStart, nLength);
            }
            else
            {
                //넘겼다.

                //데이터 끝까지 출력
                sReturn = sString.Substring(nStart);
            }

        }
        else
        {
            //넘겼다.

            //그렇다는 것은 데이터가 없음을 의미한다.
            sReturn = string.Empty;
        }

        return sReturn;
    }


    //Left
    /// <summary>
    /// 문자열 원본에서 왼쪽에서 부터 추출한 갯수만큼 문자열을 가져옵니다.
    /// </summary>
    /// <param name="sString">문자열 원본</param>
    /// <param name="nLength">추출할 갯수</param>
    /// <returns>추출된 문자열</returns>
    public static string Left(string sString, int nLength)
    {
        string sReturn;

        //추출할 갯수가 문자열 길이보다 긴지?
        if (nLength > sString.Length)
        {
            //길다!

            //길다면 원본의 길이만큼 리턴해 준다.
            nLength = sString.Length;
        }

        //문자열 추출
        sReturn = sString.Substring(0, nLength);

        return sReturn;
    }

    //Right
    /// <summary>
    /// 문자열 원본에서 오른쪽에서 부터 추출한 갯수만큼 문자열을 가져옵니다.
    /// </summary>
    /// <param name="sString">문자열 원본</param>
    /// <param name="nLength">추출할 갯수</param>
    /// <returns>추출된 문자열</returns>
    public static string Right(string sString, int nLength)
    {
        string sReturn;

        //추출할 갯수가 문자열 길이보다 긴지?
        if (nLength > sString.Length)
        {
            //길다!

            //길다면 원본의 길이만큼 리턴해 준다.
            nLength = sString.Length;
        }

        //문자열 추출
        sReturn = sString.Substring(sString.Length - nLength, nLength);

        return sReturn;

    }
}