Imports System
Imports System.Data
Imports System.Data.SqlClient

Public Class mySqlDbConn
    Public Shared _sqlCon As New Odbc.OdbcConnection
    Protected _arrDirectValue As New ArrayParam
    Private _connectionString As String = ""
    Private _commandTimeOut As Integer

    Public Shared Function Open() As Boolean

        Try

            _sqlCon.ConnectionString = "DRIVER={MySQL ODBC 5.3 ANSI Driver};SERVER=sundown99.ipdisk.co.kr;PORT=1433;DATABASE=kapi;USER=root;PASSWORD=rnjs99@;"

            _sqlCon.Open()

            Return True

        Catch ex As Exception
            MsgBox(ex.ToString, MsgBoxStyle.Exclamation)
        End Try

        Return False

    End Function


    Public Shared Function Close() As Boolean

        Try
            _sqlCon.Close()

            Return True
        Catch ex As Exception
            MsgBox(ex.ToString, MsgBoxStyle.Exclamation)
        End Try

        Return False

    End Function

#Region " DbExcuteQuery "
    Private Sub DbExcuteQuery(ByVal sql As String, ByVal arrParam As ArrayParam)

    End Sub
#End Region

#Region " ExecuteNonQuery "
    Public Shared Function ExecuteNonQuery(ByVal sp As String, ByVal arrParam As ArrayParam) As Integer
        Dim methodName As String = System.Reflection.MethodBase.GetCurrentMethod().Name
        Dim cmd As Odbc.OdbcCommand
        Dim odbcAdapt As New Odbc.OdbcDataAdapter
        Dim retValue As Integer

        Try
            Common.mySqlDbConn.Open()

            cmd = New Odbc.OdbcCommand(sp, _sqlCon)
            cmd.CommandType = CommandType.StoredProcedure
            cmd.CommandText = sp

            For i As Integer = 0 To arrParam.Count - 1
                cmd.Parameters.Add(arrParam.Item(i).Name, arrParam.Item(i).Type, arrParam.Item(i).Size)
                cmd.Parameters(arrParam.Item(i).Name).Direction = arrParam.Item(i).Direction
                cmd.Parameters(arrParam.Item(i).Name).Value = arrParam.Item(i).Value
            Next

            retValue = cmd.ExecuteNonQuery()

            Common.mySqlDbConn.Close()
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        If Common.mySqlDbConn._sqlCon.State = ConnectionState.Open Then
            Common.mySqlDbConn.Close()
        End If

    End Function

#End Region

#Region " GetDataTableSp "
    Public Shared Function GetDataTableSp(ByVal sql As String) As DataSet
        Dim ds As New DataSet
        Dim methodName As String = System.Reflection.MethodBase.GetCurrentMethod().Name
        Dim cmd As Odbc.OdbcCommand
        Dim odbcAdapt As New Odbc.OdbcDataAdapter

        sql = "CALL " & sql

        cmd = New Odbc.OdbcCommand(sql, _sqlCon)

        odbcAdapt.SelectCommand = cmd

        odbcAdapt.Fill(ds)

        Return ds

    End Function

    Public Shared Function GetDataTableSp(ByVal sql As String, ByVal arrParam As ArrayParam) As DataSet
        Dim ds As New DataSet
        Dim methodName As String = System.Reflection.MethodBase.GetCurrentMethod().Name
        Dim cmd As Odbc.OdbcCommand
        Dim odbcAdapt As New Odbc.OdbcDataAdapter
        Dim cmdText As String = ""

        ' cmd.CommandType = CommandType.StoredProcedure

        'For i As Integer = 0 To arrParam.Count - 1
        '    cmd.Parameters.Add(arrParam.Item(i).Name, arrParam.Item(i).Type, arrParam.Item(i).Size)
        '    cmd.Parameters(arrParam.Item(i).Name).Direction = arrParam.Item(i).Direction
        '    cmd.Parameters(arrParam.Item(i).Name).Value = arrParam.Item(i).Value
        'Next

        For i As Integer = 0 To arrParam.Count - 1
          
            If TypeOf arrParam.Item(i).Value Is Integer Then
                If i = arrParam.Count - 1 Then
                    cmdText = cmdText & arrParam.Item(i).Value
                Else
                    cmdText = cmdText & arrParam.Item(i).Value & ", "
                End If

            Else
                If i = arrParam.Count - 1 Then
                    cmdText = cmdText & "'" & arrParam.Item(i).Value & "'"
                Else

                    cmdText = cmdText & "'" & arrParam.Item(i).Value & "', "
                End If

            End If

        Next

        cmdText = "Call " & sql & "(" & cmdText & ")"

        cmd = New Odbc.OdbcCommand(cmdText, _sqlCon)

        odbcAdapt.SelectCommand = cmd

        odbcAdapt.Fill(ds)

        Return ds

    End Function
#End Region

#Region " GetDataTableCommndText "
    Public Shared Function GetDataTableCommndText(ByVal sql As String) As DataSet
        Dim ds As New DataSet
        Dim methodName As String = System.Reflection.MethodBase.GetCurrentMethod().Name
        Dim cmd As Odbc.OdbcCommand
        Dim odbcAdapt As New Odbc.OdbcDataAdapter

        cmd = New Odbc.OdbcCommand(sql, _sqlCon)

        odbcAdapt.SelectCommand = cmd

        odbcAdapt.Fill(ds)

        Return ds

    End Function
#End Region


    Protected Function GetConnection() As SqlConnection
        Return (New SqlConnection(MyClass._connectionString))
    End Function

    Protected Sub FillParameters(ByRef FilledCommand As SqlCommand, _
        ByVal ParamArray parameters As SqlParameter())
        Dim param As SqlParameter

        For Each param In parameters
            FilledCommand.Parameters.Add(param)
        Next
    End Sub

End Class
