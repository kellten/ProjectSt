// Copyright © 2010-2016 The CefSharp Authors. All rights reserved.
//
// Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.

using System;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Net;
using System.IO;
using System.Text;
using System.Data;
using System.Text.RegularExpressions;
using VB6 = Microsoft.VisualBasic ;
using System.Globalization;
using PaikRichStock.Common;
using Common;

namespace NewsFinder
{
    public partial class frmMain : Form
    {
        private DataSet _dsBase = new DataSet();
        private DataSet _dsNode1 = new DataSet();
        private clsKiwoomBaseInfo _clsKiwoomBaseInfo = new clsKiwoomBaseInfo();
        private int _scrNum = 1;
        private int _SLEEP_TIME = 1000;
        private CookieContainer cookies;
        private string[] dart = { 
                                    "무상증자" ,
                                    "소유상황" ,
                                    "대량보유" ,
                                    "자기주식" ,
                                    "최대주주" ,
                                    "유상증자" ,
                                    "단일판매",
                                    "주식변동",
                                    "회생계획"          
                                };
        public frmMain()
        {
            
            InitializeComponent();

            WindowState = FormWindowState.Maximized;
            var bitness = Environment.Is64BitProcess ? "x64" : "x86";
            ResizeBegin += (s, e) => SuspendLayout();
            ResizeEnd += (s, e) => ResumeLayout(true);
        }

        // 화면번호 생산
        private string GetScrNum()
        {
            if (_scrNum < 9999)
                _scrNum++;
            else
                _scrNum = 1;

            return _scrNum.ToString();
        }

        ////private void button5_Click(object sender, EventArgs e)
        ////{
        ////    browser.Load("https://www.cowboom.com/checkout/cart.cfm?uiID=16");
        ////}

        private void btnKeyWord_Click(object sender, EventArgs e)
        {
            lst검색어.Items.Add(txtKeyWord.Text.Trim());            
        }

        private int _idx1;
        private int _idx2;

        private void tmrDaum_Tick(object sender, EventArgs e)
        {
            GetDaNews();
            return;
        }

        private void lst검색어_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                lst검색어.Items.RemoveAt(lst검색어.SelectedIndex);
            }
        }

        private void txtKeyWord_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                lst검색어.Items.Add(txtKeyWord.Text.Trim());
                txtKeyWord.Text = "";
                txtKeyWord.Focus();
            }
        }

        private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if(e.ColumnIndex==3)
            {
                System.Diagnostics.Process.Start(dgNews.Rows[e.RowIndex].Cells[3].Value.ToString().Trim()); 
            }
        }

        private void GetNaBlogNews(string keyword)
        {
            DataTable dt = new DataTable();

            DataView dv;
            
            if(keyword.IndexOf("시황") > -1 || 
                keyword.IndexOf("특징") > -1 || 
                keyword.IndexOf("마감") > -1 ||
                keyword.IndexOf("관심") > -1 ||
                keyword.IndexOf("추천") > -1 ||
                keyword.IndexOf("분석") > -1 ||
                keyword.IndexOf("아침") > -1 ||
                keyword.IndexOf("장전") > -1 ||
                keyword.IndexOf("장후") > -1 ||
                keyword.IndexOf("전략") > -1)
            {
            }
            else {
                keyword = keyword + " 종목분석";
            }

            string query = System.Web.HttpUtility.UrlEncode(keyword);

            for (int i = 1; i <= 10; i++)
            {
                String apiURL = "https://openapi.naver.com/v1/search/cafearticle.xml?query=" + query + "&start=" + i.ToString() + "&display=100&sort=date";

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(apiURL);

                request.Method = "GET";
                request.Headers.Add("X-Naver-Client-Id", "MbZd5RTwx737EUZkTS4R"); //시영
                request.Headers.Add("X-Naver-Client-Secret", "E7u5wgKVW2"); //시영
                //request.Headers.Add("X-Naver-Client-Id", "lLk8wyiPEClhz4iSE5uS");
                //request.Headers.Add("X-Naver-Client-Secret", "AO5aMsIpja");

                HttpWebResponse response = (HttpWebResponse)request.GetResponse();

                StreamReader reader1 = new StreamReader(response.GetResponseStream());

                string page = reader1.ReadToEnd();
                System.Data.DataSet ds = new System.Data.DataSet();

                StringReader sReader = new StringReader(page);

                System.Xml.XmlReader reader = System.Xml.XmlReader.Create((TextReader)sReader);

                ds.ReadXml(reader);

                dt = ds.Tables["ITEM"].Clone();
                foreach (System.Data.DataRow dr in ds.Tables["ITEM"].Rows)
                {
                    dt.Rows.Add(dr.ItemArray);
                }
            }

            for (int i = 1; i <= 10; i++) {
                String apiURL = "https://openapi.naver.com/v1/search/blog.xml?query=" + query + "&start=" + i.ToString() + "&display=100&sort=date";

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(apiURL);

                request.Method = "GET";
                request.Headers.Add("X-Naver-Client-Id", "MbZd5RTwx737EUZkTS4R"); //시영
                request.Headers.Add("X-Naver-Client-Secret", "E7u5wgKVW2"); //시영
                //request.Headers.Add("X-Naver-Client-Id", "lLk8wyiPEClhz4iSE5uS");
                //request.Headers.Add("X-Naver-Client-Secret", "AO5aMsIpja");

                HttpWebResponse response = (HttpWebResponse)request.GetResponse();

                StreamReader reader1 = new StreamReader(response.GetResponseStream());

                string page = reader1.ReadToEnd();
                System.Data.DataSet ds = new System.Data.DataSet();

                StringReader sReader = new StringReader(page);

                System.Xml.XmlReader reader = System.Xml.XmlReader.Create((TextReader)sReader);

                ds.ReadXml(reader);

                //dt = ds.Tables["ITEM"].Clone();
                foreach (System.Data.DataRow dr in ds.Tables["ITEM"].Rows)
                {
                    dt.Rows.Add(dr.ItemArray);
                }
            }

            

            dv = new DataView(dt);
            dv.RowFilter = "title like '%" + keyword.Replace("종목분석", "").Trim() + "%'" ;
            //dv.Sort = "link desc";
            foreach (System.Data.DataRowView dr in dv)
            {
                if (dataGridView3.Rows.Count > 1)
                {
                    Boolean blnTrue = false;

                    for (int i = 0; i < dataGridView3.Rows.Count; i++)
                    {
                        if (i + 1 == dataGridView3.Rows.Count)
                        {
                            break;
                        }

                        if (dataGridView3.Rows[i].Cells[3].Value.ToString().Trim() == dr["LINK"].ToString().Trim())
                        {
                            blnTrue = true;
                            break;
                        }
                    }
                    if (blnTrue == false)
                    {
                        dataGridView3.Rows.Insert(0, 1);

                        dataGridView3.Rows[0].Cells[0].Value = DateTime.Now;
                        dataGridView3.Rows[0].Cells[1].Value = dr["TITLE"].ToString().Trim();
                        dataGridView3.Rows[0].Cells[2].Value = dr["DESCRIPTION"].ToString().Trim();
                        dataGridView3.Rows[0].Cells[3].Value = dr["LINK"].ToString().Trim();
                    }
                }
                else
                {
                    dataGridView3.Rows.Insert(0, 1);

                    dataGridView3.Rows[0].Cells[0].Value = DateTime.Now;
                    dataGridView3.Rows[0].Cells[1].Value = dr["TITLE"].ToString().Trim();
                    dataGridView3.Rows[0].Cells[2].Value = dr["DESCRIPTION"].ToString().Trim();
                    dataGridView3.Rows[0].Cells[3].Value = dr["LINK"].ToString().Trim();
                }

            }
        }

        private void GetNaNews()
        {
            DataSet ds;
            if (lst검색어.Items.Count == 0) return;

            string itemText = "";
            int idx = _idx1 % lst검색어.Items.Count;
            try
            {
                //itemText = System.Web.HttpUtility.UrlEncode(lst검색어.Items[_idx1].ToString().Trim(), System.Text.Encoding.UTF8);
                itemText = lst검색어.Items[idx].ToString().Trim();
            }
            catch
            {
                return;
            }
            finally
            {
                this.Text = "RichStock - "  + itemText;
                _idx1++;
                if (_idx1 > 1000) _idx1 = 0;
            }

            ds = Cls.NaverNews(itemText);
            DataView dv = new DataView(ds.Tables["item"]);
            dv.RowFilter = "ORIGINALLINK NOT LIKE '%star.mt.co.kr%'";
            bool blnTrue = false;
            foreach (System.Data.DataRowView dr in dv)
            {
                blnTrue = false;
                for (int row = 0; row < dgNews.Rows.Count - 1; row++)
                {
                    if (dgNews.Rows[row].Cells["N제목"].Value.ToString().Trim() == Cls.HtmlToPlainText( dr["TITLE"].ToString().Trim() ) )
                    {
                        blnTrue = true;
                        break;
                    }
                }

                if (blnTrue == true) continue;
                dgNews.Rows.Insert(0, 1);

                dgNews.Rows[0].Cells["N시간"].Value = DateTime.Now;
                dgNews.Rows[0].Cells["N키워드"].Value = lst검색어.Items[idx].ToString().Trim();
                dgNews.Rows[0].Cells["N제목"].Value = Cls.HtmlToPlainText( dr["TITLE"].ToString().Trim() );
                dgNews.Rows[0].Cells["N주소"].Value = dr["ORIGINALLINK"].ToString().Trim();
            }
        }

        private void GetDaNews()
        {
            if (lst검색어.Items.Count == 0) return;

            DataSet ds;

            string itemText = "";
            int idx = _idx2 % lst검색어.Items.Count;
            try
            {
                //itemText = System.Web.HttpUtility.UrlEncode(lst검색어.Items[_idx1].ToString().Trim(), System.Text.Encoding.UTF8);
                itemText = lst검색어.Items[idx].ToString().Trim();
            }
            catch
            {
                return;
            }
            finally
            {
                _idx2++;
                if (_idx1 > 1000) _idx2 = 0;
            }

            ds = Cls.DaumNews(itemText);

            DataView dv = new DataView(ds.Tables["item"]);
            bool blnTrue = false;
            foreach (System.Data.DataRowView dr in dv)
            {
                blnTrue = false;
                for (int row = 0; row < dgNews.Rows.Count - 1; row++)
                {
                    if (dgNews.Rows[row].Cells["N제목"].Value.ToString().Trim() == Cls.HtmlToPlainText( dr["제목"].ToString().Trim() ))
                    {
                        blnTrue = true;
                        break;
                    }
                }

                if (blnTrue == true) continue;

                if (dgNews.Columns.Count < 1) return;
                dgNews.Rows.Insert(0, 1);

                dgNews.Rows[0].Cells["N시간"].Value = DateTime.Now;
                dgNews.Rows[0].Cells["N키워드"].Value = dr["키워드"].ToString().Trim();
                dgNews.Rows[0].Cells["N제목"].Value = Cls.HtmlToPlainText( dr["제목"].ToString().Trim() );
                dgNews.Rows[0].Cells["N주소"].Value = dr["주소"].ToString().Trim();
            }
        }


        //private void GetDart()
        //{
        //    //if (listBox1.Items.Count == 0) return;

        //    //string itemText = System.Web.HttpUtility.UrlEncode(listBox1.Items[_idx].ToString().Trim(), System.Text.Encoding.UTF8);
        //    //string itemText = listBox1.Items[_idx].ToString().Trim();
        //    Form1 frm;

        //    DataView dv;
        //    String apiURL = "http://dart.fss.or.kr/api/search.xml?auth=2871266923d9676db1ebde770fddbc27af172b99";

        //    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(apiURL);

        //    request.Method = "GET";
        //    request.Headers.Add("X-Naver-Client-Id", "MbZd5RTwx737EUZkTS4R"); //시영
        //    request.Headers.Add("X-Naver-Client-Secret", "E7u5wgKVW2"); //시영
        //    //request.Headers.Add("X-Naver-Client-Id", "lLk8wyiPEClhz4iSE5uS");
        //    //request.Headers.Add("X-Naver-Client-Secret", "AO5aMsIpja");

        //    HttpWebResponse response = (HttpWebResponse)request.GetResponse();

        //    StreamReader reader1 = new StreamReader(response.GetResponseStream());

        //    string page = reader1.ReadToEnd();
        //    System.Data.DataSet ds = new System.Data.DataSet();

        //    StringReader sReader = new StringReader(page);

        //    System.Xml.XmlReader reader = System.Xml.XmlReader.Create((TextReader)sReader);

        //    ds.ReadXml(reader);

        //    dv = new DataView(ds.Tables["list"]);
        //    dv.RowFilter = "crp_cls in ('Y' , 'K')";
        //    foreach (System.Data.DataRowView dr in dv)
        //    {
        //        if (datagridview2.Rows.Count > 1)
        //        {
        //            Boolean blnTrue = false;

        //            for (int i = 0; i < datagridview2.Rows.Count; i++)
        //            {
        //                if (i + 1 == datagridview2.Rows.Count)
        //                {
        //                    break;
        //                }

        //                if (
        //                       datagridview2.Rows[i].Cells[1].Value.ToString().Trim() == dr["crp_nm"].ToString().Trim() &&
        //                       datagridview2.Rows[i].Cells[2].Value.ToString().Trim() == dr["rpt_nm"].ToString().Trim() 
        //                    )
        //                {
        //                    blnTrue = true;
        //                    break;
        //                }
        //            }
        //            if (blnTrue == false)
        //            {
        //                datagridview2.Rows.Insert(0, 1);

        //                datagridview2.Rows[0].Cells[0].Value = dr["rcp_dt"].ToString().Trim();
        //                datagridview2.Rows[0].Cells[1].Value = dr["crp_nm"].ToString().Trim();
        //                datagridview2.Rows[0].Cells[2].Value = dr["rpt_nm"].ToString().Trim();
        //                datagridview2.Rows[0].Cells[3].Value = "http://dart.fss.or.kr/dsaf001/main.do?rcpNo=" + dr["rcp_no"].ToString().Trim();

        //                foreach (string str in dart)
        //                {
        //                    if (datagridview2.Rows[0].Cells[2].Value.ToString().IndexOf(str) > -1)
        //                    {
        //                        lblStockName.Text = _allStockDataset.Tables[0].Select("STOCK_NAME LIKE '" + dr["crp_nm"].ToString().Trim() + "%'")[0].ToString();
        //                        string oStr = "";
        //                        oStr = datagridview2.Rows[0].Cells[2].Value.ToString() + " " + datagridview2.Rows[0].Cells[3].Value.ToString();
        //                        frm = new Form1(oStr, datagridview2.Rows[0].Cells[1].Value.ToString());
        //                        frm.Show(this);
        //                        frm.TopMost = true;
                                
        //                        System.Windows.Forms.Clipboard.SetText(datagridview2.Rows[0].Cells[1].Value.ToString().Trim());
        //                        //break;
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //        else
        //        {
        //            datagridview2.Rows.Insert(0, 1);

        //            datagridview2.Rows[0].Cells[0].Value = dr["rcp_dt"].ToString().Trim();
        //            datagridview2.Rows[0].Cells[1].Value = dr["crp_nm"].ToString().Trim();
        //            datagridview2.Rows[0].Cells[2].Value = dr["rpt_nm"].ToString().Trim();
        //            datagridview2.Rows[0].Cells[3].Value = "http://dart.fss.or.kr/dsaf001/main.do?rcpNo=" + dr["rcp_no"].ToString().Trim();

        //            foreach (string str in dart)
        //            {
        //                if (datagridview2.Rows[0].Cells[2].Value.ToString().IndexOf(str) > -1)
        //                {
        //                    lblStockName.Text = _allStockDataset.Tables[0].Select("STOCK_NAME LIKE '" + dr["crp_nm"].ToString().Trim() + "%'")[0].ToString();
        //                    string oStr = "";
        //                    oStr = datagridview2.Rows[0].Cells[2].Value.ToString() + " " + datagridview2.Rows[0].Cells[3].Value.ToString();
        //                    frm = new Form1(oStr, datagridview2.Rows[0].Cells[1].Value.ToString());
        //                    frm.Show(this);
        //                    frm.TopMost = true;


        //                    System.Windows.Forms.Clipboard.SetText(datagridview2.Rows[0].Cells[1].Value.ToString().Trim());
        //                    //break;
        //                    break;
        //                }
        //            }
        //        }

        //    }
        //}
        private void timer3_Tick(object sender, EventArgs e)
        {
            GetNaNews();
            return;
        }

        private void GetGong()
        {
            bool 팝업필터 = false;

                WebClient wc = new WebClient();
                wc.Encoding = System.Text.UTF8Encoding.UTF8;

                //String apiURL = "http://dart.fss.or.kr/api/todayRSS.xml";

                String buffer = wc.DownloadString("http://dart.fss.or.kr/api/todayRSS.xml");
            
                wc.Dispose();
                StringReader sr = new StringReader(buffer);
                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.Load(sr);
                sr.Close();
                //XmlNodeList forecastNodes = doc.SelectNodes("xml_api_reply/news/news_entry");
                System.Xml.XmlNodeList forecastNodes = doc.SelectNodes("rss/channel/item");
                foreach (System.Xml.XmlNode node in forecastNodes)
                {
                    if (node["title"].InnerText.IndexOf("(기타)") > -1 
                        || node["title"].InnerText.IndexOf("(코넥스)") > -1
                        ) continue;

                    //if (datagridview2.Rows.Count > 1)
                    //{
                        Boolean blnTrue = false;

                        for (int i = 0; i < dgDart.Rows.Count; i++)
                        {
                            if (i + 1 == dgDart.Rows.Count)
                            {
                                break;
                            }


                            string tmpStr = dgDart.Rows[i].Cells["제목"].Value.ToString();

                            if(tmpStr.IndexOf("매출액 대비") > -1)
                            {
                                tmpStr = dgDart.Rows[i].Cells["제목"].Value.ToString().Replace("-자동매수", "").Substring(0, dgDart.Rows[i].Cells[2].Value.ToString().Replace("-자동매수", "").Length - 5);
                            }
                            else
                            {
                                tmpStr = dgDart.Rows[i].Cells["제목"].Value.ToString().Replace("-자동매수", "");
                            }

                            //if (datagridview2.Rows[i].Cells[1].Value.ToString() == _htmlSource2.Substring(idxNews + 11, idxLast - idxNews - 11))
                            if (tmpStr.Replace("(3자배정)", "").Replace("-매출액 대비:", "") == node["title"].InnerText)
                            {
                                blnTrue = true;
                                break;
                            }
                        }
                        if (blnTrue == false)
                        {
                            dgDart.Rows.Insert(0, 1);

                            dgDart.Rows[0].Cells["시간"].Value = DateTime.Now;
                            dgDart.Rows[0].Cells["종목"].Value = node["dc:creator"].InnerText;
                            dgDart.Rows[0].Cells["제목"].Value = node["title"].InnerText;
                            dgDart.Rows[0].Cells["주소"].Value = node["link"].InnerText;

                            if (node["title"].InnerText.IndexOf("유상증자") > -1 && node["title"].InnerText.IndexOf("자율공시") < 0)
                            {
                                string html = "";
                            
                                html = GetReport(node["link"].InnerText);
                     
                                try
                                {
                                    if (html.IndexOf("3자배정") > -1)
                                    {
                                        dgDart.Rows[0].Cells["제목"].Value = node["title"].InnerText.Trim() + "(3자배정)" + "-자동매수";
                                    }
                                }
                                catch
                                {
                                }
                            }
                            else if (node["title"].InnerText.IndexOf("단일판매ㆍ공급계약체결") > -1 && node["title"].InnerText.IndexOf("기재정정") < 0 )
                            {
                                string html = GetReport(node["link"].InnerText);
                                try
                                {

                                    if (html.IndexOf("매출액 대비") > -1 || html.IndexOf("매출액대비") > -1)
                                    {
                                        int index1 = 0;
                                        int index2 = 0;
                                        int index3 = 0;
                                        int index4 = 0;
                                        if ( html.IndexOf("매출액대비") > -1)
                                        {
                                            index1 = html.IndexOf("매출액대비");
                                        }else if(html.IndexOf("매출액 대비") > -1) {
                                            index1 = html.IndexOf("매출액 대비");
                                        }
                                    
                                        index2 = html.IndexOf("xforms_input", index1);
                                        index3 = html.IndexOf(">", index2);
                                        index4 = html.IndexOf("<", index3);

                                        int leng = 5 - html.Substring(index3 + 1, index4 - index3 - 1).Length;
                                        string tmpStr1 = html.Substring(index3 + 1, index4 - index3 - 1);
                                        double tmpCnt = double.Parse(html.Substring(index3 + 1, index4 - index3 - 1));
                                        for (int i = 0; i < leng; i++)
                                        {
                                            tmpStr1 = " " + tmpStr1;
                                        }

                                        if (tmpCnt > 15)
                                        {
                                            tmpStr1 = tmpStr1 + "-자동매수";
                                        }

                                        dgDart.Rows[0].Cells["제목"].Value = node["title"].InnerText + "-매출액 대비:" + tmpStr1;
                                    
                                    }
                                }
                                catch
                                {
                                }
                            }

                            else if (node["title"].InnerText.IndexOf("(자율공시)") > -1
                                && (node["title"].InnerText.IndexOf("유상증자") > -1 || node["title"].InnerText.IndexOf("사채") > -1)
                                && node["title"].InnerText.IndexOf("발행결과") > -1
                                && node["title"].InnerText.IndexOf("기재정정") < 0
                                )
                            {
                                string html = GetReport(node["link"].InnerText);

                                try
                                {
                                    int index1 = 0;
                                    int index2 = 0;
                                    int index3 = 0;
                                    int index4 = 0;
                                    if (html.IndexOf("발행예정금액") > -1)
                                    {
                                        index1 = html.IndexOf("발행예정금액");
                                    }

                                    index2 = html.IndexOf("xforms_input", index1);
                                    index3 = html.IndexOf(">", index2);
                                    index4 = html.IndexOf("<", index3);

                                    string tmpStr1 = html.Substring(index3 + 1, index4 - index3 - 1);

                                    if (html.IndexOf("실제발행금액") > -1)
                                    {
                                        index1 = html.IndexOf("실제발행금액");
                                    }

                                    index2 = html.IndexOf("xforms_input", index1);
                                    index3 = html.IndexOf(">", index2);
                                    index4 = html.IndexOf("<", index3);

                                    string tmpStr2 = html.Substring(index3 + 1, index4 - index3 - 1);

                                    if (tmpStr1.Trim() == tmpStr2.Trim())
                                    {
                                        dgDart.Rows[0].Cells["제목"].Value = node["title"].InnerText + "-자동매수";
                                    }
                                }
                                catch
                                {
                                }
                            }
                            팝업필터 = false;

                            foreach (string str2 in lst팝업필터.Items)
                            {
                                if (dgDart.Rows[0].Cells["제목"].Value.ToString().IndexOf(str2) > -1)
                                {
                                    팝업필터 = true;
                                    break;
                                }
                            }

                            if (팝업필터 == true) { break; }

                            foreach (string str1 in lsb자동매수단어.Items)
                            {
                                if (dgDart.Rows[0].Cells[2].Value.ToString().IndexOf(str1) > -1)
                                {
                                    AutoBuy(dgDart.Rows[0].Cells["종목"].Value.ToString().Trim(), dgDart.Rows[0].Cells["제목"].Value.ToString().Trim());
                                    break;
                                }
                            }
                        
                            foreach (string str in dart)
                            {
                                if (dgDart.Rows[0].Cells["제목"].Value.ToString().IndexOf(str) > -1)
                                {
                                    string oStr = "";
                                    oStr = dgDart.Rows[0].Cells["제목"].Value.ToString() + " " + dgDart.Rows[0].Cells["주소"].Value.ToString();
                                    //frm = new Form1(oStr, datagridview2.Rows[0].Cells[1].Value.ToString());
                                    //frm.Show();

                                    _frm.UpdateNoti(oStr);
                                    _frm.Visible = true;
                                    _frm.TopMost = true;

                                    System.Windows.Forms.Clipboard.SetText(dgDart.Rows[0].Cells["종목"].Value.ToString().Trim());
                                    //break;
                                    break;
                                }
                            }
                        }
                }

        }

        private void Logger(string gubun , string msg)
        {
            dgLog.Rows.Insert(0, 1);
            dgLog.Rows[0].Cells[0].Value = gubun;
            dgLog.Rows[0].Cells[1].Value = msg;
        }

        public void AutoBuy(string StockName, string title)
        {
            Decimal 매출액대비Per = 0;
            int tempCnt = 0;
            if (title.IndexOf("매출액 대비") > -1)
            {
                매출액대비Per = Decimal.Parse(title.Replace("-자동매수", "").Substring(title.IndexOf("대비:") + 3));
            }

            lsb종목들.Items.Clear();
            if (UcMainStock1._allStockDataset == null) { return; }
            DataView dv = new DataView(UcMainStock1._allStockDataset.Tables[0]);
            dv.RowFilter = "STOCK_NAME LIKE '" + StockName + "%'";
            string 거래구분 = "00";

            if (dv.Count == 0) { return; }
            foreach (DataRowView dr in dv)
            {
                lsb종목들.Items.Add(dr["STOCK_CODE"].ToString().Trim() + "|" + dr["STOCK_NAME"].ToString().Trim());
            }

            if (lsb종목들.Items.Count == 1)
            {
                txt주문종목코드.Text = lsb종목들.Items[0].ToString().Split('|')[0];
                lblStockName.Text = lsb종목들.Items[0].ToString().Split('|')[1];

                int 매수금액 = Int32.Parse(txt매수금액.Text.Trim());

                SendCurrentPriceMsg(txt주문종목코드.Text);

                while (_dsBase.Tables.Count < 1 && tempCnt < 300) { 
                    Application.DoEvents();
                    System.Threading.Thread.Sleep(5);
                    tempCnt++;
                }

                if (_dsBase.Tables.Count < 1) { return; }
                int 현재가 = Int32.Parse(_dsBase.Tables[0].Rows[0]["현재가"].ToString().Trim());

                txt현재가.Text = 현재가.ToString();

                SetQty(매수금액, 현재가);
                int 수량 = Int32.Parse(txt수량.Text.Trim());

                if (현재가 > 매수금액)
                {
                    Logger("자동매수", lblStockName.Text + " 은 현재가 (" + 현재가 + ") 가 매수 총 금액보다 높습니다.");
                    return;
                }

                //if (_주식기본정보.거래량 < 50000)
                //{
                //    Logger("자동매수", lblStockName.Text + " 은 거래량 (" + _주식기본정보.거래량.ToString() + ") 이 너무 적은 종목입니다.");
                //    return;
                //}

                if (chk자동매매.Checked == true)
                {
                    if (title.IndexOf("3자") > -1 || 매출액대비Per > 40)
                    {
                        거래구분 = "03";
                    }

                    int 호가단위 = Int32.Parse(txt호가단위.Text.Trim());
                    SendBuySellMsg(txt주문종목코드.Text.Trim(), 거래구분, 1, 호가단위, 현재가, 수량); //1:매수 2:매도
                }

                lsb종목들.Visible = false;
            }
            else
            {
                lsb종목들.Visible = true;
            }
        }

        private void SetQty(int 매수금액 , int 현재가)
        {
            try
            {
                if (현재가 < 1)
                {
                    txt수량.Text = "0";
                }
                else
                {
                    txt수량.Text = Convert.ToInt32(매수금액 / 현재가).ToString();
                }

            }
            catch (Exception ex) { Logger("에러(SetQty)", ex.Message); }
        }

        private void SendBuySellMsg(string 종목코드, string 거래구분, int 매매구분, int 호가단위, int 현재가, int 수량)
        {
            // =================================================
            // 거래구분 취득
            // 00:지정가, 03:시장가, 05:조건부지정가, 06:최유리지정가, 07:최우선지정가,
            // 10:지정가IOC, 13:시장가IOC, 16:최유리IOC, 20:지정가FOK, 23:시장가FOK,
            // 26:최유리FOK, 61:장개시전시간외, 62:시간외단일가매매, 81:시간외종가

            // =================================================
            // 매매구분 취득
            // (1:신규매수, 2:신규매도 3:매수취소, 
            // 4:매도취소, 5:매수정정, 6:매도정정)
            ucMainStock.OrderType 매매Type = (ucMainStock.OrderType)매매구분;
            
            if (
                DateTime.Now < DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd 09:00:00")) || DateTime.Now > DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd 15:20:00"))
            )
            {
                return;
            }

            int 호가단위금액 = 0;
            int 주문금액 = 0;

            if (현재가 < 1000) 호가단위금액 = 1;
            else if (현재가 >= 1000 && 현재가 < 5000) 호가단위금액 = 5;
            else if (현재가 >= 5000 && 현재가 < 10000) 호가단위금액 = 10;
            else if (현재가 >= 10000 && 현재가 < 50000) 호가단위금액 = 50;
            else if (현재가 >= 50000 && 현재가 < 100000) 호가단위금액 = 100;
            else if (현재가 >= 100000 && 현재가 < 500000) 호가단위금액 = 500;
            else if (현재가 >= 500000) 호가단위금액 = 1000;

            if (매매구분 == 1)
            {
                주문금액 = 현재가 - (호가단위 * 호가단위금액);
            }
            else if (매매구분 == 2)
            {
                주문금액 = 현재가 + (호가단위 * 호가단위금액);
            }
            else
            {
                주문금액 = 현재가;
            }

            if (매매Type == ucMainStock.OrderType.신규매수)
            {
                UcMainStock1.SendOrder("매수", "4949", cboAccount.Text.Trim(), 매매Type,
                    종목코드, 수량, 거래구분 == "03" ? 0 : 주문금액, 거래구분, "");
            }
            else if (매매Type == ucMainStock.OrderType.신규매도)
            {
                UcMainStock1.SendOrder("매도", "4949", cboAccount.Text.Trim(), 매매Type,
                    종목코드, 수량, 거래구분 == "03" ? 0 : 주문금액, 거래구분, "");
            }
        }

        public static string GetResponse(string url)
        {
            HttpWebRequest request = HttpWebRequest.Create(url) as HttpWebRequest;

            HttpWebResponse response = (request.GetResponse() as HttpWebResponse);

            StreamReader reader = new StreamReader(response.GetResponseStream());
            return reader.ReadToEnd();
        }

        public static string GetResponse(string url, Encoding Encode)
        {
            HttpWebRequest request = HttpWebRequest.Create(url) as HttpWebRequest;

            HttpWebResponse response = (request.GetResponse() as HttpWebResponse);

            StreamReader reader = new StreamReader(response.GetResponseStream(), Encode);
            return reader.ReadToEnd();
        }

        private void timer4_Tick(object sender, EventArgs e)
        {
            GetGong();
            return;
        }

        private void datagridview2_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 3)
            {
                System.Diagnostics.Process.Start(dgDart.Rows[e.RowIndex].Cells[3].Value.ToString().Trim());
            }
        }

        Form1 _frm;
        private void SimpleBrowserForm_Load(object sender, EventArgs e)
        {
            var bitness = Environment.Is64BitProcess ? "x64" : "x86";
            _frm = new Form1();

            if (bitness == "x64") { _SLEEP_TIME = _SLEEP_TIME / 2; }
            UcMainStock1.OnEventConnect = ModStatus.EventOn;
            UcMainStock1.OnReceiveConditionVer = ModStatus.EventOn;
            UcMainStock1.OnReceiveTrCondition = ModStatus.EventOn;
            UcMainStock1.OnReceiveTrData = ModStatus.EventOn;

            UcMainStock1.Connection();
        }

        private void SimpleBrowserForm_Shown(object sender, EventArgs e)
        {
            lst검색어.Items.Clear();
            int counter = 0;
            string line;
            string curFile = Application.StartupPath + @"\keyword.txt";
            if (File.Exists(curFile) == true)
            {
                System.IO.StreamReader file = new System.IO.StreamReader(curFile, Encoding.Default);
                while ((line = file.ReadLine()) != null)
                {
                    if (lst검색어.Items.Contains(line) == true) continue;

                    txtKeyWord.Text = line;
                    txtKeyWord_KeyDown(txtKeyWord, new KeyEventArgs(Keys.Enter));
                    counter++;
                }

                file.Close();
            }

            counter = 0;
            curFile = Application.StartupPath + @"\자동매수단어.txt";
            if (File.Exists(curFile) == true)
            {
                System.IO.StreamReader file = new System.IO.StreamReader(curFile, Encoding.Default);
                while ((line = file.ReadLine()) != null)
                {
                    if (lsb자동매수단어.Items.Contains(line) == true) continue;

                    txt자동매수단어.Text = line;
                    txt자동매수단어_KeyDown(txt자동매수단어, new KeyEventArgs(Keys.Enter));
                    counter++;
                }

                file.Close();
            }
            else
            {
                lsb자동매수단어.Items.Clear();
                lsb자동매수단어.Items.Add("(3자배정)");
            }

            counter = 0;
            curFile = Application.StartupPath + @"\팝업필터.txt";
            if (File.Exists(curFile) == true)
            {
                System.IO.StreamReader file = new System.IO.StreamReader(curFile, Encoding.Default);
                while ((line = file.ReadLine()) != null)
                {
                    if (lst팝업필터.Items.Contains(line) == true) continue;

                    txt팝업필터.Text = line;
                    txt팝업필터_KeyDown(txt팝업필터, new KeyEventArgs(Keys.Enter));
                    counter++;
                }

                file.Close();
            }
            else
            {
                lst팝업필터.Items.Clear();
                lst팝업필터.Items.Add("[기재정정]");
                lst팝업필터.Items.Add("[첨부정정]");
            }

            txt자동매수단어.Text = "";
            txt팝업필터.Text = "";
            txtKeyWord.Focus();
        }

        private void SimpleBrowserForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            tmrNaver.Stop();
            tmrDaum.Stop();
            tmrDart.Stop();
            
            _frm.Dispose();
            string fileName = Application.StartupPath + @"\keyword.txt";
            FileStream fs = null;
            try
            {
                fs = new FileStream(fileName, FileMode.Create );
                using (StreamWriter writer = new StreamWriter(fs, Encoding.Default))
                {
                    foreach (string str in lst검색어.Items)
                    {
                        writer.WriteLine(str);
                    }
                }
            }
            finally
            {
                if (fs != null)
                    fs.Dispose();
            }

            fileName = Application.StartupPath + @"\자동매수단어.txt";
            try
            {
                fs = new FileStream(fileName, FileMode.Create);
                using (StreamWriter writer = new StreamWriter(fs, Encoding.Default))
                {
                    foreach (string str in lsb자동매수단어.Items)
                    {
                        writer.WriteLine(str);
                    }
                }
            }
            finally
            {
                if (fs != null)
                    fs.Dispose();
            }

            fileName = Application.StartupPath + @"\팝업필터.txt";
            try
            {
                fs = new FileStream(fileName, FileMode.Create);
                using (StreamWriter writer = new StreamWriter(fs, Encoding.Default))
                {
                    foreach (string str in lst팝업필터.Items)
                    {
                        writer.WriteLine(str);
                    }
                }
            }
            finally
            {
                if (fs != null)
                    fs.Dispose();
            }
        }

        private void toolStripContainer_ContentPanel_Load(object sender, EventArgs e)
        {

        }

        private void dataGridView3_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 3)
            {
                System.Diagnostics.Process.Start(dataGridView3.Rows[e.RowIndex].Cells[3].Value.ToString().Trim());
            }
        }

        private void btn종목분석_Click(object sender, EventArgs e)
        {
            dataGridView3.RowCount = 1;
            GetNaBlogNews(txt종목분석.Text);
        }

        private void txt종목분석_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btn종목분석.PerformClick();
            }
        }


        private string GetReport(string url)
        {
            string html = GetResponse(url, Encoding.UTF8);
            string[] arrPattern = new string[0];
           
        
            string urlPart = "";
            // Regex 와 MatchCollection 를 이용해서 패턴으로 분류합니다.             
            int index1 = 0;
            int index2 = 0;

            string tmpStr = "";

            string strPatternOne = "click: function()";
            //string strPatternOne = @"click:*\r";
            string strPatternTwo = "javascript:";

            urlPart = "http://dart.fss.or.kr/report/viewer.do?";
            int count = 0;
            string html1 = "";

            if (html.IndexOf("단일판매ㆍ공급계약체결") > -1 || html.IndexOf("자율공시") > -1)
            {

                Regex regex = new Regex(strPatternTwo);
                MatchCollection mc = regex.Matches(html);
                System.Collections.Hashtable ht = new System.Collections.Hashtable();

                foreach (Match m in mc)
                {
                    // 첫번째 패턴으로 뽑아낸 데이터를 저장합니다..
                    if (count == 0)
                    {
                        ////Array.Resize(ref arrPattern, count + 1);
                        ////arrPattern[count] = m.ToString();
                        index1 = html.IndexOf("viewDoc(", m.Index);
                        index2 = html.IndexOf(")", index1);
                        tmpStr = html.Substring(index1 + 9, index2 - 10 - index1);
                        string[] tmpSp = tmpStr.Split(',');

                        urlPart += "rcpNo=" + tmpSp[0].Replace("'", "").Trim();
                        urlPart += "&dcmNo=" + tmpSp[1].Replace("'", "").Trim();
                        urlPart += "&eleId=0";
                        urlPart += "&offset=0";
                        urlPart += "&length=0";
                        urlPart += "&dtd=HTML";
                    }

                    count++;
                }

                html1 = GetResponse(urlPart, Encoding.Default);
            }
            else
            {
                Regex regex = new Regex(strPatternOne);
                MatchCollection mc = regex.Matches(html);
                System.Collections.Hashtable ht = new System.Collections.Hashtable();

                foreach (Match m in mc)
                {
                    // 첫번째 패턴으로 뽑아낸 데이터를 저장합니다..
                    if (count == 1)
                    {
                        ////Array.Resize(ref arrPattern, count + 1);
                        ////arrPattern[count] = m.ToString();
                        index1 = html.IndexOf("viewDoc(", m.Index);
                        index2 = html.IndexOf(")", index1);
                        tmpStr = html.Substring(index1 + 9, index2 - 10 - index1);
                        string[] tmpSp = tmpStr.Split(',');

                        urlPart += "rcpNo=" + tmpSp[0].Replace("'", "").Trim();
                        urlPart += "&dcmNo=" + tmpSp[1].Replace("'", "").Trim();
                        urlPart += "&eleId=" + tmpSp[2].Replace("'", "").Trim();
                        urlPart += "&offset=" + tmpSp[3].Replace("'", "").Trim();
                        urlPart += "&length=" + tmpSp[4].Replace("'", "").Trim();
                        urlPart += "&dtd=" + tmpSp[5].Replace("'", "").Trim();
                    }

                    count++;
                }

                html1 = GetResponse(urlPart, Encoding.UTF8);
            }         

            return html1;
        }
        
        private void btn공시재로드_Click(object sender, EventArgs e)
        {
            tmrDaum.Start();
            tmrNaver.Start();
            tmrDart.Start();
            dgDart.RowCount = 1;
            txt현재가.Text = "0";
            txt수량.Text = "0";
        }

        private void txt자동매수단어_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                lsb자동매수단어.Items.Add(txt자동매수단어.Text.Trim());
                txt자동매수단어.Text = "";
                txt자동매수단어.Focus();
            }
        }

        private void lsb자동매수단어_KeyDown(object sender, KeyEventArgs e)
        {
            if(e.KeyCode == Keys.Delete ) {
                lsb자동매수단어.Items.RemoveAt(lsb자동매수단어.SelectedIndex);
            }
        }

        private void txt팝업필터_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                lst팝업필터.Items.Add(txt팝업필터.Text.Trim());
                txt팝업필터.Text = "";
                txt팝업필터.Focus();
            }
        }

        private void lst팝업필터_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                lst팝업필터.Items.RemoveAt(lst팝업필터.SelectedIndex);
            }
        }

        private void UcMainStock1_OnDsOpw00018(DataSet ds)
        {
            CultureInfo culture = null;
            dg잔고.DataSource = ds.Tables[0];

            for (int row = 0; row < dg잔고.RowCount - 1; row++)
            {
                for (int col = 0; col < dg잔고.ColumnCount - 1; col++)
                {
                    try
                    {
                        if (col > 1)
                        {
                            culture = CultureInfo.InvariantCulture;
                            if (dg잔고.Rows[row].Cells[col].Value.ToString().Trim() == "") continue;
                            if (dg잔고.Columns[col].HeaderText.IndexOf("%") > -1)
                            {
                                dg잔고.Rows[row].Cells[col].Value = Decimal.Parse(dg잔고.Rows[row].Cells[col].Value.ToString().Trim(), culture);
                            }
                            else
                            {
                                dg잔고.Rows[row].Cells[col].Value = Int32.Parse(dg잔고.Rows[row].Cells[col].Value.ToString().Trim(), culture);
                            }

                        }
                    }
                    catch (Exception ex){
                        Logger("에러(UcMainStock1_OnDaOpw00018)", ex.Message);
                        break; 
                    }
                }
            }

            SettingAccountList();
            // Automatically generate the DataGridView columns.
            dg잔고.AutoGenerateColumns = true;
        }

        private void SendCurrentPriceMsg(string 종목코드)
        {
            _dsBase.Tables.Clear();
            UcMainStock1.GetStockBaseInfo(종목코드, "1001");
        }

        private void txt주문종목코드_KeyDown(object sender, KeyEventArgs e)
        {
            int tempCnt = 0;
            if (e.KeyCode == Keys.Enter)
            {
                if (lsb종목들.Visible == true)
                {
                    txt주문종목코드.Text = lsb종목들.Items[0].ToString().Split('|')[0];
                    lblStockName.Text = lsb종목들.Items[0].ToString().Split('|')[1];

                    int 매수금액 = Int32.Parse(txt매수금액.Text.Trim());
                    SendCurrentPriceMsg(txt주문종목코드.Text);

                    while (_dsBase.Tables.Count < 1 && tempCnt < 300) { 
                        Application.DoEvents();
                        System.Threading.Thread.Sleep(5);
                        tempCnt++;
                    }
                    if (_dsBase.Tables.Count < 1) { lsb종목들.Visible = false; return; }
                    int 현재가 = Int32.Parse(_dsBase.Tables[0].Rows[0]["현재가"].ToString().Trim());

                    txt현재가.Text = 현재가.ToString();
                    SetQty(매수금액, 현재가);

                    lsb종목들.Visible = false;
                }
                else
                {
                    lsb종목들.Items.Clear();
                    DataView dv = new DataView(UcMainStock1._allStockDataset.Tables[0]);
                    dv.RowFilter = "STOCK_NAME = '" + txt주문종목코드.Text.Trim() + "'";

                    if (dv.Count == 0) return;

                    foreach (DataRowView dr in dv)
                    {
                        lsb종목들.Items.Add(dr["STOCK_CODE"].ToString().Trim() + "|" + dr["STOCK_NAME"].ToString().Trim());
                    }

                    if (lsb종목들.Items.Count == 1)
                    {
                        txt주문종목코드.Text = lsb종목들.Items[0].ToString().Split('|')[0];
                        lblStockName.Text = lsb종목들.Items[0].ToString().Split('|')[1];

                        int 매수금액 = Int32.Parse(txt매수금액.Text.Trim());
                        SendCurrentPriceMsg(txt주문종목코드.Text);

                        while (_dsBase.Tables.Count < 1 && tempCnt < 300)
                        {
                            Application.DoEvents();
                            System.Threading.Thread.Sleep(5);
                            tempCnt++;
                        }
                        if (_dsBase.Tables.Count < 1) { return; }
                        int 현재가 = Int32.Parse(_dsBase.Tables[0].Rows[0]["현재가"].ToString().Trim());

                        txt현재가.Text = 현재가.ToString();
                        SetQty(매수금액, 현재가);

                        txt주문종목코드.SelectAll();
                        lsb종목들.Visible = false;
                    }
                    else
                    {
                        lsb종목들.Visible = true;
                    }
                }
            }
        }

        private void btnBuy_Click(object sender, EventArgs e)
        {
            string 종목코드 = txt주문종목코드.Text.Trim();
            int 주문가 = Int32.Parse(txt현재가.Text.Trim());
            int 수량 = Int32.Parse(txt수량.Text.Trim());
            SendBuySellMsg(종목코드, "00", 1, 0, 주문가, 수량);
        }

        private void btnSell_Click(object sender, EventArgs e)
        {
            string 종목코드 = txt주문종목코드.Text.Trim();
            int 주문가 = Int32.Parse(txt현재가.Text.Trim());
            int 수량 = Int32.Parse(txt수량.Text.Trim());
            SendBuySellMsg(종목코드, "00", 2, 0, 주문가, 수량);
        }

        private void txt현재가_TextChanged(object sender, EventArgs e)
        {
            int 매수금액 = Int32.Parse(txt매수금액.Text.Trim());
            int 주문가 = Int32.Parse(txt현재가.Text.Trim());
            SetQty(매수금액 , 주문가);
        }

        private void txt주문종목코드_Enter(object sender, EventArgs e)
        {
            TextBox obj = (TextBox)sender;
            obj.SelectAll();
        }

        private void btn실행_Click(object sender, EventArgs e)
        {
            if (chk이익실현.Checked == false && chk손절.Checked == false) { MessageBox.Show("이익실현 or 손절 둘 중 하나는 체크 하셔야 StopLoss 가 실행가능합니다." , "경고!!!" ,  MessageBoxButtons.OK , MessageBoxIcon.Warning ); return; }
            
            if (btnStopLoss.Text == "▶")
            {
                btnStopLoss.Text = "||";
                chk이익실현.Enabled = false;
                txt이익실현.Enabled = false;
                chk손절.Enabled = false;
                txt손절.Enabled = false;
            }else {
                btnStopLoss.Text = "▶";
                chk이익실현.Enabled = true;
                txt이익실현.Enabled = true;
                chk손절.Enabled = true;
                txt손절.Enabled = true;
            }
        }

        private void lsb제외항목_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                lsb제외항목.Items.RemoveAt(lsb제외항목.SelectedIndex);
            }
        }

        private void txt제외항목_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (UcMainStock1._allStockDataset == null) return;
                if (lsb제외다수.Visible == true)
                {
                    lsb제외항목.Items.Add(lsb제외다수.Items[0].ToString());
                    lsb제외다수.Visible = false;
                    txt제외항목.Text = "";
                    txt제외항목.Focus();
                }
                else
                {
                    lsb제외다수.Items.Clear();
                    DataView dv = new DataView(UcMainStock1._allStockDataset.Tables[0]);
                    dv.RowFilter = "STOCK_NAME LIKE '" + txt제외항목.Text + "%'";

                    if (dv.Count == 0) return;

                    foreach (DataRowView dr in dv)
                    {
                        lsb제외다수.Items.Add(dr["STOCK_NAME"].ToString().Trim() + "|" + dr["STOCK_CODE"].ToString().Trim());
                    }

                    if (lsb제외다수.Items.Count == 1)
                    {
                        lsb제외항목.Items.Add(lsb제외다수.Items[0].ToString());
                        lsb제외다수.Visible = false;
                    }
                    else
                    {
                        lsb제외다수.Visible = true;
                    }
                }
            }
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            DisconnectRealDataScreenNo(true, "");
            if(tbStockList.SelectedIndex == 1) {
                UcMainStock1.Getopw00018(cboAccount.Text.Trim(), "", "", 1, "6969");
            }
            else if (tbStockList.SelectedIndex == 2)
            {
                if (dg조건리스트.Rows.Count < 2 )
                { 
                    UcMainStock1.GetUserConditionLoad();
                }
            }
        }


        private void btn로그클리어_Click(object sender, EventArgs e)
        {
            dgLog.RowCount = 1;
        }


        private void dg조건리스트_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if(dg조건리스트.Rows[e.RowIndex].Cells["실행"].Value.ToString().Trim() == "||") return;
            if(dg조건리스트.Rows[e.RowIndex].Cells["화면번호"].Value.ToString().Trim() == "") return;

            dg조건종목.RowCount = 1;
            UcMainStock1.GetUserConditionStockLoad(dg조건리스트.Rows[e.RowIndex].Cells["화면번호"].Value.ToString().Trim()
                , dg조건리스트.Rows[e.RowIndex].Cells["조건명"].Value.ToString().Trim()
                , dg조건리스트.Rows[e.RowIndex].Cells["번호"].Value.ToString().Trim(), 0);

            dg조건종목.Tag = "2001";
        }


        private void btn조건식_Click(object sender, EventArgs e)
        {
            UcMainStock1.GetUserConditionLoad();
        }

        private void btn일괄매수_Click(object sender, EventArgs e)
        {
            int 매수금액 = 0;
            int 수량 = 0;
            int 주문가 = 0;
            int 현재가 = 0;
            string 종목코드 = "";
            for (int row = 0; row < dg조건종목.RowCount - 1; row++)
            {
                if (dg조건종목.Rows[row].Cells[0].Value == null) { continue; }
                if (Convert.ToBoolean(dg조건종목.Rows[row].Cells[0].Value) == true)
                {
                    종목코드 = dg조건종목.Rows[row].Cells["C종목코드"].Value.ToString();
                    현재가 = Int32.Parse(dg조건종목.Rows[row].Cells["C현재가"].Value.ToString());
                    try
                    {
                        if (txt1차매수금액.Text.Trim() == "" || dg조건종목.Rows[row].Cells["C1차매수가"].Value.ToString().Trim() == "") { continue; }
                        주문가 = MakeOrderPrice(Convert.ToInt32(Convert.ToDecimal(dg조건종목.Rows[row].Cells["C1차매수가"].Value.ToString()).ToString("########")));
                        if (현재가 > 주문가)
                        {
                            매수금액 = Int32.Parse(txt1차매수금액.Text.Trim());
                            수량 = Convert.ToInt32(매수금액 / 주문가);
                            if (매수금액 < 주문가) { continue; }
                            SendBuySellMsg(종목코드, "00", 1, 0, 주문가, 수량);
                        }

                        if (txt2차매수금액.Text.Trim() == "" || dg조건종목.Rows[row].Cells["C2차매수가"].Value.ToString().Trim() == "") { continue; }
                        주문가 = MakeOrderPrice(Convert.ToInt32(Convert.ToDecimal(dg조건종목.Rows[row].Cells["C2차매수가"].Value.ToString()).ToString("########")));
                        if (현재가 > 주문가)
                        {
                            매수금액 = Int32.Parse(txt2차매수금액.Text.Trim());
                            수량 = Convert.ToInt32(매수금액 / 주문가);
                            if (매수금액 < 주문가) { continue; }
                            SendBuySellMsg(종목코드, "00", 1, 0, 주문가, 수량);
                        }

                        if (txt3차매수금액.Text.Trim() == "" || dg조건종목.Rows[row].Cells["C3차매수가"].Value.ToString().Trim() == "") { continue; }
                        주문가 = MakeOrderPrice(Convert.ToInt32(Convert.ToDecimal(dg조건종목.Rows[row].Cells["C3차매수가"].Value.ToString()).ToString("########")));
                        if (현재가 > 주문가)
                        {
                            매수금액 = Int32.Parse(txt3차매수금액.Text.Trim());
                            수량 = Convert.ToInt32(매수금액 / 주문가);
                            if (매수금액 < 주문가) { continue; }
                            SendBuySellMsg(종목코드, "00", 1, 0, 주문가, 수량);
                        }
                    }
                    finally
                    {
                        dg조건종목.Rows[row].Cells[0].Value = false;
                    }
                }
            }
        }

        public int MakeOrderPrice(int 금액)
        {
            int 주문가 = 0;
            if (금액 < 1000) 주문가 = 금액;
            else if (금액 >= 1000 && 금액 < 10000) 주문가 = Convert.ToInt32(Cls.Left(금액.ToString(), 3) + "0");
            else if (금액 >= 10000 && 금액 < 100000) 주문가 = Convert.ToInt32(Cls.Left(금액.ToString(), 3) + "00");
            else if (금액 >= 100000 && 금액 < 1000000) 주문가 = Convert.ToInt32(Cls.Left(금액.ToString(), 3) + "000");
            else if (금액 >= 1000000 && 금액 < 10000000) 주문가 = Convert.ToInt32(Cls.Left(금액.ToString(), 3) + "0000");

            return 주문가;
        }

        private void btn잔고매수_Click(object sender, EventArgs e)
        {
            int 주문가 = Convert.ToInt32(Decimal.Parse(txt잔고주문가.Text.Trim()));
            int 수량 = Convert.ToInt32(Decimal.Parse(txt잔고수량.Text.Trim()));
            SendBuySellMsg(txt잔고종목코드.Text.Trim(), "00", 1, 0, 주문가, 수량);
        }

        private void btn잔고매도_Click(object sender, EventArgs e)
        {
            int 주문가 = Convert.ToInt32(Decimal.Parse(txt잔고주문가.Text.Trim()));
            int 수량 = Convert.ToInt32(Decimal.Parse(txt잔고수량.Text.Trim()));
            SendBuySellMsg(txt잔고종목코드.Text.Trim(), "00", 2, 0, 주문가, 수량);
        }

        private void dataGridView4_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            txt잔고종목코드.Text = dg잔고.Rows[e.RowIndex].Cells["종목번호"].Value.ToString().Substring(1);
            lbl잔고종목명.Text = dg잔고.Rows[e.RowIndex].Cells["종목명"].Value.ToString().Trim();
            txt잔고주문가.Text = dg잔고.Rows[e.RowIndex].Cells["현재가"].Value.ToString().Trim();
            txt잔고수량.Text = dg잔고.Rows[e.RowIndex].Cells["매매가능수량"].Value.ToString().Trim();
        }

        private bool _실시간실행여부;
        private void dg조건리스트_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 3)
            {
                if (dg조건리스트.Rows[e.RowIndex].Cells["실행"].Value.ToString().Trim() == "▶") { 
                    if (dg조건리스트.Rows[e.RowIndex].Cells["화면번호"].Value.ToString().Trim() == "") return;

                    _실시간실행여부 = false;
                    for (int row = 0; row < dg조건리스트.RowCount - 1; row++)
                    {
                        if (dg조건리스트.Rows[e.RowIndex].Cells["실행"].Value.ToString().Trim() == "||")
                        {
                            _실시간실행여부 = true;
                            break;
                        }
                    }

                    if (_실시간실행여부== true)
                    {
                        MessageBox.Show("실행중인 조건검색이 있습니다. 종료하고 실행해 주십시요" , "경고!!" ,  MessageBoxButtons.OK ,  MessageBoxIcon.Error);
                        return;
                    }
                    
                    dg조건종목.RowCount = 1;
                    UcMainStock1.GetUserConditionStockLoad(dg조건리스트.Rows[e.RowIndex].Cells["화면번호"].Value.ToString().Trim()
                        , dg조건리스트.Rows[e.RowIndex].Cells["조건명"].Value.ToString().Trim()
                        , dg조건리스트.Rows[e.RowIndex].Cells["번호"].Value.ToString().Trim(), 1);

                    dg조건종목.Tag = "2001";
                    dg조건리스트.Rows[e.RowIndex].Cells["실행"].Value = "||";
                    _실시간실행여부 = true;
                }else {
                    //UcMainStock1.GetUserConditionStockStop(dg조건리스트.Rows[e.RowIndex].Cells["화면번호"].Value.ToString().Trim(), dg조건리스트.Rows[e.RowIndex].Cells["조건명"].Value.ToString().Trim()
                    //    , Int32.Parse(dg조건리스트.Rows[e.RowIndex].Cells["번호"].Value.ToString().Trim())
                    // );
                    dg조건리스트.Rows[e.RowIndex].Cells["실행"].Value = "▶";
                    _실시간실행여부 = false;
                }
            }
        }


        private void SettingAccountData(DataSet ds)
        {
            Decimal 매입가 = 0;
            Decimal 현재가 = 0;
            string 종목코드 = "";
            string 종목명 = "";
            Decimal 매매가능수량 = 0;
            if (ds == null) return;

            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                for (int row = 0; row < dg잔고.RowCount - 1; row++)
                {
                    종목코드 = Cls.Right(dg잔고.Rows[row].Cells["종목번호"].Value.ToString().Trim(), 6);
                    종목명 = dg잔고.Rows[row].Cells["종목명"].Value.ToString().Trim();
                    매매가능수량 = Decimal.Parse(dg잔고.Rows[row].Cells["매매가능수량"].Value.ToString().Trim());
                    if (dr["STOCK_CODE"].ToString().Trim() == 종목코드)
                    {
                        dg잔고.Rows[row].Cells["현재가"].Value = Decimal.Parse(dr["현재가"].ToString().Trim()).ToString("##,###,###,##0");
                        dg잔고.Rows[row].Cells["등락율"].Value = dr["등락율"].ToString().Trim();
                        //dg조건종목.Rows[row].Cells[1].Value = dr["전일대비기호"].ToString().Trim();
                        dg잔고.Rows[row].Cells["시가"].Value = Decimal.Parse(dr["시가"].ToString().Trim()).ToString("##,###,###,##0");
                        dg잔고.Rows[row].Cells["고가"].Value = Decimal.Parse(dr["고가"].ToString().Trim()).ToString("##,###,###,##0");
                        dg잔고.Rows[row].Cells["저가"].Value = Decimal.Parse(dr["저가"].ToString().Trim()).ToString("##,###,###,##0");

                        매입가 = Decimal.Parse(dr["매입가"].ToString().Trim());
                        현재가 = Decimal.Parse(dr["현재가"].ToString().Trim());

                        ProcessStopLoss(매입가, 현재가, 종목코드, 종목명, 매매가능수량);
                        return;
                    }
                }
            }

            Application.DoEvents();
        }

        private void ProcessStopLoss(Decimal 매입가, Decimal 현재가,string 종목코드 , string 종목명 , Decimal 매매가능수량)
        {
            Decimal stoplossPer = 0;
            stoplossPer = (현재가 - 매입가) / 매입가 * 100;
            Decimal fitPer = Decimal.Parse(txt이익실현.Text.Trim());
            Decimal lossPer = Decimal.Parse(txt이익실현.Text.Trim());
            if (종목코드 == "" || 종목명 == "" || 매매가능수량 == 0) return;
            if (btnStopLoss.Text.Trim() == "▶") return;

            if (lsb제외항목.Items.Contains(종목명 + "|" + 종목코드) == true) return;

            if (chk이익실현.Checked == true)
            {
                if (stoplossPer >= fitPer) {
                    SendBuySellMsg(종목코드, "00", (int)ucMainStock.OrderType.신규매도, 1, Convert.ToInt32(현재가), Convert.ToInt32(매매가능수량));
                }
            }
            if (chk손절.Checked == true)
            {
                if (stoplossPer <= lossPer)
                {
                    SendBuySellMsg(종목코드, "00", (int)ucMainStock.OrderType.신규매도, 1, Convert.ToInt32(현재가), Convert.ToInt32(매매가능수량));
                }
            }
        }

        private  void SettingConditionStockListDetailData(DataSet ds) {
            if(ds == null) return;

            foreach(DataRow dr in ds.Tables[0].Rows) {
                    for(int row = 0; row < dg조건종목.RowCount - 1;row++) {
                        if(dr["STOCK_CODE"].ToString().Trim() == dg조건종목.Rows[row].Cells["C종목코드"].Value.ToString().Trim()) {
                            dg조건종목.Rows[row].Cells["C현재가"].Value = dr["현재가"].ToString().Trim();
                            dg조건종목.Rows[row].Cells["C등락률"].Value = dr["등락율"].ToString().Trim();
                            dg조건종목.Rows[row].Cells["C시가"].Value = dr["시가"].ToString().Trim();
                            dg조건종목.Rows[row].Cells["C고가"].Value = dr["고가"].ToString().Trim();
                            dg조건종목.Rows[row].Cells["C저가"].Value = dr["저가"].ToString().Trim();

                            if (row.ToString().Length == 1) dg조건종목.Rows[row].Cells["C스크린NO"].Value = "2" + "00" + row.ToString();
                            if (row.ToString().Length == 2) dg조건종목.Rows[row].Cells["C스크린NO"].Value = "2" + "0" + row.ToString();
                            if (row.ToString().Length == 3) dg조건종목.Rows[row].Cells["C스크린NO"].Value = "2" + row.ToString();

                            return;
                        }
                }
            }

            Application.DoEvents();
        }

        private void ucMainStock1_OnConnection(string status)
        {
            //SetBaseFavControl(0);
            //SetBaseStockListDisplay();

            UcMainStock1.GetAccount();

            foreach(DataRow dr in UcMainStock1._AccNo.Tables["ACCNO"].Rows) {
                cboAccount.Items.Add(dr["ACCNO"].ToString().Trim());
            }
            cboAccount.SelectedIndex = 0;
            //tmrDaum.Enabled = true;
            tmrNaver.Enabled = true;
            tmrDart.Enabled = true;
        }

        private void ucMainStock1_OnDayDsBaseInfo(DataSet ds)
        {
            if(ds == null) return;
            int row = 0;
            DataRow dr;
            DataRow dr1;
            if(tbStockList.SelectedIndex == 2) {
                try
                {
                    ds.Tables[0].Columns.Add("시종등락률");
                    ds.Tables[0].Columns.Add("지지선1");
                    ds.Tables[0].Columns.Add("지지선2");
                    ds.Tables[0].Columns.Add("지지선3");
                    ds.Tables[0].Columns.Add("지지선4");
                    for (row = ds.Tables[0].Rows.Count - 1; row >= 0; row--)
                    {
                        if (row < 6)
                        {
                            if (row < 5) {                             
                                dr = ds.Tables[0].Rows[row];
                                dr1 = ds.Tables[0].Rows[row+1];
                                dr["시종등락률"] = (Decimal.Parse(dr["현재가"].ToString()) - Decimal.Parse(dr1["현재가"].ToString())) / Decimal.Parse(dr1["현재가"].ToString()) * 100;
                                dr["지지선1"] = Decimal.Parse(dr["현재가"].ToString()) - ((Decimal.Parse(dr["현재가"].ToString()) - Decimal.Parse(dr["저가"].ToString())) / 4);
                                dr["지지선2"] = (Decimal.Parse(dr["현재가"].ToString()) + Decimal.Parse(dr["저가"].ToString())) / 2;
                                dr["지지선3"] = Decimal.Parse(dr["저가"].ToString()) + ((Decimal.Parse(dr["현재가"].ToString()) - Decimal.Parse(dr["저가"].ToString())) / 4);
                                dr["지지선4"] = Decimal.Parse(dr["저가"].ToString());
                            }
                        }
                        else
                        {
                            ds.Tables[0].Rows.RemoveAt(row);
                        }
                    }
                    ds.Tables[0].Rows.RemoveAt(ds.Tables[0].Rows.Count - 1);
                    string tableName = ds.Tables["DayStockBaseInfo"].Rows[0]["종목코드"].ToString().Trim();

                    if (_dsNode1.Tables[tableName] != null)
                    {
                        _dsNode1.Tables.Remove(tableName);
                        DataTable dt = new DataTable(tableName);

                        ds.Tables["DayStockBaseInfo"].TableName = tableName;
                        dt = ds.Tables[tableName];
                        _dsNode1.Tables.Add(dt.Copy());
                    }
                    else
                    {
                        DataTable dt = new DataTable(tableName);
                        ds.Tables["DayStockBaseInfo"].TableName = tableName;
                        dt = ds.Tables[tableName];
                        _dsNode1.Tables.Add(dt.Copy());
                    }

                    if (_dsNode1.Tables.Count >= dg조건종목.RowCount - 1)
                    {
                        Application.DoEvents();
                        btn계산.PerformClick();
                    }
                }
                catch (Exception ex)
                {
                    Logger("에러", ex.Message);
                }
                finally
                {
                }
                
            }
        }

        private void ucMainStock1_OnDsBaseInfo(DataSet ds)
        {
            ds.Tables[0].Rows[0]["현재가"] = Math.Abs(Convert.ToInt32(ds.Tables[0].Rows[0]["현재가"]));
            _dsBase = ds.Copy();
        }

        private void ucMainStock1_OnDsGetConditionList(DataSet ds)
        {
            if(ds == null) {return;}

            try {
                dg조건리스트.RowCount = 1;

                int row = 0;
                
                    foreach(DataRow dr in ds.Tables["CondiList"].Select("CONDI_NAME LIKE 'API%'")) {
                        if(dg조건리스트.RowCount - 1 <= row) dg조건리스트.RowCount = dg조건리스트.RowCount + 1;
                        dg조건리스트.Rows[row].Cells["조건명"].Value = dr["CONDI_NAME"].ToString().Trim();
                        dg조건리스트.Rows[row].Cells["번호"].Value = dr["CONDI_SEQ"].ToString().Trim();
                        dg조건리스트.Rows[row].Cells["화면번호"].Value = "9"  + dr["CONDI_SEQ"].ToString().Trim();
                        dg조건리스트.Rows[row].Cells["실행"].Value = "▶";

                        row = row + 1;
                    }

            }catch(Exception ex) {
                Logger("에러!" , ex.ToString());
                if (UcMainStock1.EVENT_STATUS.STATUS_OnReceiveConditionVer == ModStatus.EventOff) {
                    UcMainStock1.OnReceiveConditionVer = ModStatus.EventOn;
                }
            }
        }

        private void ucMainStock1_OnDsOpw00018_1(DataSet ds)
        {
            dg잔고.DataSource = ds.Tables[0];
            dg잔고.Tag = "6969";

            for (int row = 0; row < dg잔고.RowCount - 1; row++)
            {
                for (int col = 0; col < dg잔고.ColumnCount - 1; col++)
                {
                    try
                    {
                        if (col > 1)
                        {
                            if (dg잔고.Rows[row].Cells[col].Value.ToString().Trim() == "") continue;
                            if (dg잔고.Columns[col].HeaderText.IndexOf("%") > -1)
                            {
                                dg잔고.Rows[row].Cells[col].Value = Decimal.Parse(dg잔고.Rows[row].Cells[col].Value.ToString().Trim());
                            }
                            else
                            {
                                dg잔고.Rows[row].Cells[col].Value = Decimal.Parse(dg잔고.Rows[row].Cells[col].Value.ToString().Trim()).ToString("##,###,###,##0");
                            }

                            dg잔고.Columns[col].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                        }
                        else
                        {
                            dg잔고.Columns[col].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger("에러(UcMainStock1_OnDaOpw00018)", ex.Message);
                        break;
                    }
                }
            }

            // Automatically generate the DataGridView columns.
            dg잔고.AutoGenerateColumns = true;
        }

        private void ucMainStock1_OnDsReceiveChejanData(DataSet ds)
        {
            //Public ChejanFidList(,) As String = {{"9201", "계좌번호"}, {"9203", "주문번호"}, {"9001", "종목코드"}, {"913", "주문상태"}, {"302", "종목명"}, {"900", "주문수량"}, _
            //                        {"901", "주문가격"}, {"902", "미체결수량"}, {"903", "체결누계금액"}, {"904", "원주문번호"}, {"905", "주문구분"}, {"906", "매매구분"}, _
            //                        {"907", "매도수구분"}, {"908", "주문/체결시간"}, {"909", "체결번호"}, {"910", "체결가"}, {"911", "체결량"}, {"10", "현재가"}, _
            //                        {"27", "(최우선)매도호가"}, {"28", "(최우선)매수호가"}, {"914", "단위체결가"}, {"915", "단위체결량"}, {"919", "거부사유"}, _
            //                        {"920", "화면번호"}, {"917", "신용구분"}, {"916", "대출일"}, {"930", "보유수량"}, {"931", "매입단가"}, {"932", "총매입가"}, _
            //                        {"933", "주문가능수량"}, {"945", "당일순매수수량"}, {"946", "매도/매수구분"}, {"950", "당일총매도손일"}, {"951", "예수금"}, _
            //                        {"307", "기준가"}, {"8019", "손익율"}, {"957", "신용금액"}, {"958", "신용이자"}, {"918", "만기일"}, {"990", "당일실현손익(유가)"}, _
            //                        {"991", "당일실현손익률(유가)"}, {"992", "당일실현손익(신용)"}, {"993", "당일실현손익률(신용)"}, {"397", "파생상품거래단위"}, _
            //                        {"305", "상한가"}, {"306", "하한가"}}
            if(ds==null) {return;}
            DataRow dr;
            if (ds.Tables[0].Select("체결가 <> ''").Length > 0)
            {
                dr = ds.Tables[0].Select("체결가 <> ''")[0];
            }
            else { return; }

            string str = String.Format("원주문번호 : {0} ,  {1} 이 {2} 에 {3} 체결되었습니다.", dr["원주문번호"].ToString().Trim(), dr["종목명"].ToString().Trim(), dr["체결가"].ToString().Trim(), dr["매매구분"].ToString().Trim());
            _frm.UpdateNoti(str);
            Logger("체결" , str);
        }

        private void ucMainStock1_OnDsReceiveRealData(DataSet ds)
        {
            if (ds.Tables[0].Rows[0]["sRealType"].ToString().Trim() == "주식체결")
            {
                if (tbStockList.SelectedIndex == 1)
                {
                    SettingAccountData(ds);
                }
                else if (tbStockList.SelectedIndex == 2)
                {
                    SettingConditionStockListDetailData(ds);
                }
            }
        }

        private void ucMainStock1_OnDsSetConditionList(DataSet ds)
        {
            if(ds == null) return;
            try {
                int row = 0;

                //if (_dsNode1 != null) _dsNode1.Tables.Clear();

                foreach(DataRow dr in ds.Tables[0].Rows) {
                    if (dr["STOCK_CODE"].ToString().Trim() == "") continue;
                    if (dg조건종목.RowCount - 1 <= row) dg조건종목.RowCount++;

                    dg조건종목.Rows[row].Cells["C종목코드"].Value = dr["STOCK_CODE"].ToString().Trim();
                    dg조건종목.Rows[row].Cells["C종목명"].Value = dr["STOCK_NAME"].ToString();
                    if ((row + 1).ToString().Length == 1) dg조건종목.Rows[row].Cells["C스크린NO"].Value = "8" + "00" + (row + 1).ToString();
                    if ((row + 1).ToString().Length == 2) dg조건종목.Rows[row].Cells["C스크린NO"].Value = "8" + "0" + (row + 1).ToString();
                    if ((row + 1).ToString().Length == 3) dg조건종목.Rows[row].Cells["C스크린NO"].Value = "8" + "" + (row + 1).ToString();

                    UcMainStock1.GetDayStockBaseInfo(dr["STOCK_CODE"].ToString().Trim(), dg조건종목.Rows[row].Cells["C스크린NO"].Value.ToString());
                    Application.DoEvents();
                    System.Threading.Thread.Sleep(_SLEEP_TIME);
                    
                    row++;
                }
            }catch(Exception ex){
                Logger("에러" , ex.ToString());
                if(UcMainStock1.EVENT_STATUS.STATUS_OnReceiveTrCondition = ModStatus.EventOff) {
                    UcMainStock1.OnReceiveTrCondition = ModStatus.EventOn;
                }
            }
        }

        private void ucMainStock1_OnDsStockByTradePortNumer(DataSet ds)
        {

        }

        private void ucMainStock1_OnDsTradePortInfo(DataRow dr)
        {

        }

        private void btn계산_Click(object sender, EventArgs e)
        {
            SetConditionPrice();
        }

        private void SetConditionPrice()
        {
            DataView dv;
            string 종목코드;
            string 등락률;
            Decimal temp;
            Decimal 지지선1;
            Decimal 시가;
            Decimal 저가;
            if (_dsNode1.Tables.Count < 1) { return; }

            for (int row = 0; row < dg조건종목.Rows.Count - 1; row++)
            {
                종목코드 = dg조건종목.Rows[row].Cells["C종목코드"].Value.ToString().Trim();
                dv = new DataView(_dsNode1.Tables[종목코드]);
                
                if (dv.Count < 1) { dv.RowFilter = ""; continue; }
                
                //if (dg조건종목.Rows[row].Cells["C1차매수가"].Value != null) { continue; }
                //if (dg조건종목.Rows[row].Cells["C1차매수가"].Value.ToString().Trim() != "") { continue; }

                등락률 = ((Decimal.Parse(dv[0]["현재가"].ToString().Trim()) - Decimal.Parse(dv[1]["현재가"].ToString().Trim())) / Decimal.Parse(dv[1]["현재가"].ToString().Trim()) * 100).ToString("#0.00");
                dg조건종목.Rows[row].Cells["C현재가"].Value = dv[0]["현재가"].ToString().Trim();
                dg조건종목.Rows[row].Cells["C등락률"].Value = 등락률;
                dg조건종목.Rows[row].Cells["C거래량"].Value = dv[0]["거래량"].ToString().Trim();
                dg조건종목.Rows[row].Cells["C시가"].Value = dv[0]["시가"].ToString().Trim();
                dg조건종목.Rows[row].Cells["C고가"].Value = dv[0]["고가"].ToString().Trim();
                dg조건종목.Rows[row].Cells["C저가"].Value = dv[0]["저가"].ToString().Trim();

                dv.RowFilter = "시종등락률 >= 7.00 ";
                dv.Sort = "현재가 ASC";
                if (dv.Count < 1) { continue; }
                if (Decimal.Parse(dv[0]["시종등락률"].ToString()) < 10)
                {
                    지지선1 = Decimal.Parse(dv[0]["지지선2"].ToString().Trim());
                    시가 = Decimal.Parse(dv[0]["시가"].ToString().Trim());
                    저가 = Decimal.Parse(dv[0]["저가"].ToString().Trim());

                    dg조건종목.Rows[row].Cells["C1차매수가"].Value = dv[0]["지지선2"].ToString().Trim();

                    temp = (지지선1 - 시가) / 시가 * 100;
                    if (temp < 2)
                    {
                        dg조건종목.Rows[row].Cells["C1차매수가"].Value = dv[0]["시가"].ToString().Trim();
                    }
                    else {
                        dg조건종목.Rows[row].Cells["C1차매수가"].Value = dv[0]["지지선1"].ToString().Trim();
                    }

                    temp = (시가 - 저가) / 저가 * 100;

                    if (temp < 2)
                    {
                        dg조건종목.Rows[row].Cells["C2차매수가"].Value = dv[0]["저가"].ToString().Trim();
                        dg조건종목.Rows[row].Cells["C3차매수가"].Value = dv[0]["최저가종가MA"].ToString().Trim();
                    }
                    else
                    {
                        dg조건종목.Rows[row].Cells["C2차매수가"].Value = dv[0]["시가"].ToString().Trim();
                        dg조건종목.Rows[row].Cells["C3차매수가"].Value = dv[0]["저가"].ToString().Trim();
                    }
                    
                }
                else
                {
                    dg조건종목.Rows[row].Cells["C1차매수가"].Value = dv[0]["지지선1"].ToString().Trim();
                    dg조건종목.Rows[row].Cells["C2차매수가"].Value = dv[0]["지지선2"].ToString().Trim();
                    dg조건종목.Rows[row].Cells["C3차매수가"].Value = dv[0]["지지선3"].ToString().Trim();
                }

                 
                dv.RowFilter = "";
                Application.DoEvents();
            }
        }

        private void SettingCondtionStockList()
        {
            string strStockCode = "";
            int nCount = 0;
            string screenNo = dg조건종목.Tag.ToString();

            for(int row = 0; row < dg조건종목.RowCount - 1 ; row++) {
                if (dg조건종목.Rows[row].Cells["C종목코드"].Value.ToString() == "") return;
                strStockCode += dg조건종목.Rows[row].Cells["C종목코드"].Value.ToString() + ";";
                nCount++;
            }
            UcMainStock1.DisconnectRealData(screenNo);
            UcMainStock1.GetOptKWFid(strStockCode, nCount, screenNo);
        }

        private void SettingAccountList()
        {
            string strStockCode = "";
            int nCount = 0;
            string screenNo = dg잔고.Tag.ToString();

            for (int row = 0; row < dg잔고.RowCount - 1; row++)
            {
                if (dg잔고.Rows[row].Cells["종목번호"].Value.ToString() == "") return;
                strStockCode += Cls.Right(dg잔고.Rows[row].Cells["종목번호"].Value.ToString().Trim(), 6) + ";";
                nCount++;
            }

            UcMainStock1.DisconnectRealData(screenNo);
            UcMainStock1.GetOptKWFid(strStockCode, nCount, screenNo); //실시간데이터요청
        }

        private void DisconnectRealDataScreenNo(bool all , string screenNo ) {
            if(all == true) {
                if (dg조건종목.Tag != null && dg조건종목.Tag.ToString() != "")
                {
                    UcMainStock1.DisconnectRealData(dg조건종목.Tag.ToString().Trim());
                    dg조건종목.Tag = "";
                }
            }else{
                UcMainStock1.DisconnectRealData(screenNo);
            }

        }

        private void lblStockName_TextChanged(object sender, EventArgs e)
        {
            txt종목분석.Text = lblStockName.Text;
        }

        private void UcMainStock1_OnDsSetConditionReal(DataSet ds)
        {
            string 종목코드 = "";
            string 종목명 = "";
            string 구분 = "";
            bool 존재여부 = false;
            if (ds == null) { return; }
            if (ds.Tables["CondiStockReal"].Rows.Count < 1) { return; }
            DataRow dr = ds.Tables[0].Rows[0];
            종목코드 = dr["STOCK_CODE"].ToString().Trim();
            종목명 = dr["STOCK_NAME"].ToString().Trim();
            구분 = dr["STR_TYPE"].ToString().Trim();

            for (int row = dg조건종목.RowCount - 1; row >= 0; row--)
            {
                //strType : 편입(“I”), 이탈(“D”) 
                if (dg조건종목.Rows[row].Cells["C종목코드"].Value.ToString().Trim() == 종목코드)
                {
                    if (구분 == "D")
                    {
                        UcMainStock1.DisconnectRealData(dg조건종목.Rows[row].Cells["C스크린NO"].Value.ToString());
                        dg조건종목.Rows.RemoveAt(row);
                    }
                    존재여부 = true;
                }
            }
            if (존재여부 == false)
            {
                if (구분 == "I")
                {
                    string scrNum = GetScrNum();
                    dg조건종목.Rows.Insert(0, 1);
                    dg조건종목.Rows[0].Cells["C종목코드"].Value = 종목코드;
                    dg조건종목.Rows[0].Cells["C종목명"].Value = 종목명;
                    dg조건종목.Rows[0].Cells["C종목명"].Value = dr["STOCK_NAME"].ToString();
                    if (scrNum.Length == 1) dg조건종목.Rows[0].Cells["C스크린NO"].Value = "9" + "00" + scrNum;
                    if (scrNum.Length == 2) dg조건종목.Rows[0].Cells["C스크린NO"].Value = "9" + "0" + scrNum;
                    if (scrNum.Length == 3) dg조건종목.Rows[0].Cells["C스크린NO"].Value = "9" + "" + scrNum;

                    _dsNode1.Tables.Clear();
                    UcMainStock1.GetDayStockBaseInfo(dr["STOCK_CODE"].ToString().Trim(), dg조건종목.Rows[0].Cells["C스크린NO"].Value.ToString());
                    Application.DoEvents();
                }

                Application.DoEvents();

                if(dg조건종목.Rows[0].Cells["C1차매수가"].Value.ToString().Trim() != "") {
                    dg조건종목.Rows[0].Cells["C체크"].Value = true;
                    Application.DoEvents();
                    btn일괄매수.PerformClick();
                }
            }
        }
    }
}
