Imports PaikRichStock.Common
Imports System.Xml
Imports System.IO

Public Class ucVolumeBasicAnalysis

    Private _MainStock2 As New PaikRichStock.Common.ucMainStockVer2
    Private _sourceDt As New DataTable
    Private _clsFunc As New PaikRichStock.Common.clsFunc
    Private _xmlDt As New DataTable
    Private _tagetDtRowCount As Integer = 0
    Private _tagetDtIngRowIndex As Integer = 0
    Private _clsCombineCallOpt As New PaikRichStock.Common.clsCombineCallOpt()

#Region " Property "
    Public WriteOnly Property MainStock2 As PaikRichStock.Common.ucMainStockVer2
        Set(value As PaikRichStock.Common.ucMainStockVer2)
            _MainStock2 = value
            For i As Integer = 0 To UBound(modDataTable.opt10059_Cal)
                cboCondition.Items.Add(modDataTable.opt10059_Cal(i))
            Next

            cboCondition.Items.Add("주도세력")
            _clsCombineCallOpt.MainStock = _MainStock2
        End Set
    End Property

    Private _tagetDt As New DataTable

    Public WriteOnly Property TagetDt As DataTable
        Set(value As DataTable)
            GetTagetDt(value)
            InitSourceDataTable()
            GetCurrentVolume()
        End Set
    End Property

    Public WriteOnly Property TagetDataSet As DataSet
        Set(value As DataSet)
            GetTagetDataSet(value)
            InitSourceDataTable()
            GetCurrentVolume()
        End Set
    End Property

    Public ReadOnly Property SourceDt As DataTable
        Get
            Return _sourceDt
        End Get
    End Property

    Private _reload As Boolean = False

    Public WriteOnly Property Reload As Boolean
        Set(value As Boolean)
            _reload = value
        End Set
    End Property
#End Region

#Region " InitTagetDataTable "
    Private Sub InitTagetDataTable()
        _tagetDt.Reset()
        _tagetDt = Nothing
        _tagetDt = New DataTable

        With _tagetDt.Columns
            .Add("STOCK_CODE", System.Type.GetType("System.String"))
            .Add("STOCK_NAME", System.Type.GetType("System.String"))
        End With

    End Sub

    Private Sub InitSourceDataTable()
        _sourceDt.Reset()
        _sourceDt = Nothing
        _sourceDt = New DataTable

        With _sourceDt.Columns
            .Add("STOCK_CODE", System.Type.GetType("System.String"))
            .Add("STOCK_NAME", System.Type.GetType("System.String"))
            .Add("JUDO_SERUK", System.Type.GetType("System.String"))
            For i As Integer = 0 To UBound(modDataTable.opt10059_Cal)
                .Add(modDataTable.opt10059_Cal(i) & "합최저점", System.Type.GetType("System.Int32"))
                .Add(modDataTable.opt10059_Cal(i) & "합최고점", System.Type.GetType("System.Int32"))
                .Add(modDataTable.opt10059_Cal(i) & "분산합비율", System.Type.GetType("System.Int16"))
                '.Add(modDataTable.opt10059_Cal(i) & "금액최저점", System.Type.GetType("System.Int64"))
                '.Add(modDataTable.opt10059_Cal(i) & "금액최고점", System.Type.GetType("System.Int64"))
                .Add(modDataTable.opt10059_Cal(i) & "금액최저점", System.Type.GetType("System.Int64"))
                .Add(modDataTable.opt10059_Cal(i) & "금액최고점", System.Type.GetType("System.Int64"))
                .Add(modDataTable.opt10059_Cal(i) & "분산금액비율", System.Type.GetType("System.Int16"))
            Next
        End With
    End Sub
#End Region

#Region " GetTagetDt "
    Private Sub GetTagetDt(ByVal value As DataTable)
        Dim dr2th As DataRow

        InitTagetDataTable()

        With _tagetDt
            For Each dr As DataRow In value.Rows
                dr2th = .NewRow

                dr2th("STOCK_CODE") = dr("STOCK_CODE")
                dr2th("STOCK_NAME") = dr("STOCK_NAME")

                .Rows.Add(dr2th)
            Next
        End With

        _tagetDtRowCount = _tagetDt.Rows.Count - 1
        _tagetDtIngRowIndex = 0
        lblTagetDtRowCount.Text = _tagetDtRowCount

    End Sub
#End Region

    Private Sub DisplayTagetDtIng()
        lblTagetDtRowIndex.Text = _tagetDtIngRowIndex
    End Sub

#Region " GetTagetDataSet "
    Private Sub GetTagetDataSet(ByVal value As DataSet)
        Dim dr2th As DataRow

        InitTagetDataTable()

        With _tagetDt
            For Each dr As DataRow In value.Tables(0).Rows
                dr2th = .NewRow

                dr2th("STOCK_CODE") = dr("STOCK_CODE")
                dr2th("STOCK_NAME") = dr("STOCK_NAME")

                .Rows.Add(dr2th)
            Next
        End With
    End Sub
#End Region

#Region " GetCurrentVolume "
    Private Sub GetCurrentVolume()
        If _tagetDt.Rows.Count < 1 Then Exit Sub
        Try
            If _reload = False Then

                For Each dr In _tagetDt.Rows
                    GetXmlDataAnalysis(Trim(dr("STOCK_CODE").ToString()), Trim(dr("STOCK_NAME").ToString()))
                Next

                _clsFunc.DataTableMappingToDataGridView(_sourceDt, dgvList)

            Else

                DisplayTagetDtIng()

                GetXmlDataAnalysis(Trim(_tagetDt.Rows(_tagetDtIngRowIndex).Item("STOCK_CODE").ToString()), Trim(_tagetDt.Rows(_tagetDtIngRowIndex).Item("STOCK_NAME").ToString()))

            End If

        Catch ex As Exception
            MsgBox(ex.ToString, MsgBoxStyle.Exclamation)
        End Try
    End Sub

    Private Sub GetXmlDataAnalysis(ByVal stockCode As String, ByVal stockName As String)
        Dim dt As New DataTable
        If stockName = "이화전기" Then
            MsgBox("이화전기")
        End If
        If stockName = "에스마크" Then
            MsgBox("에스마크")
        End If
        Try

            lblStockCode.Text = ""
            lblStockName.Text = ""

            If File.Exists("C:\Xml2\" & stockCode & "_" & stockName & ".xml") Then
                If File.Exists("C:\Xml2\" & stockCode & "_" & stockName & ".xsd") = False Then Exit Sub

                lblStockCode.Text = stockCode
                lblStockName.Text = stockName

                _xmlDt = Nothing
                _xmlDt = New DataTable

                Dim xmlFile As XmlReader
                Dim xmlFileSc As XmlReader
                xmlFile = XmlReader.Create("C:\Xml2\" & stockCode & "_" & stockName & ".xml", New XmlReaderSettings())
                xmlFileSc = XmlReader.Create("C:\Xml2\" & stockCode & "_" & stockName & ".xsd", New XmlReaderSettings())

                _xmlDt.ReadXmlSchema(xmlFileSc)
                _xmlDt.ReadXml(xmlFile)

                xmlFile.Close()
                xmlFileSc.Close()

                For i As Integer = 0 To dt.Rows.Count - 1
                    If Trim(_xmlDt.Rows(i).Item("거래량").ToString()) <> "" Then Exit For

                    If Trim(_xmlDt.Rows(i).Item("거래량").ToString()) = "" Then
                        _xmlDt.Rows.RemoveAt(0)
                    End If
                Next

                If _xmlDt.Rows.Count < 1 Then Exit Sub

                If _reload = True Then
                    If Trim(_xmlDt.Rows(0).Item("일자")) < CDateTime.FormatDate(DateAdd(DateInterval.Day, -1, Now.Date)) Then

                        _clsCombineCallOpt.CallOpt5981(stockCode, stockName)

                    Else
                        CalVolume(stockCode, stockName)

                        If _tagetDtIngRowIndex = _tagetDtRowCount Then
                            _clsFunc.DataTableMappingToDataGridView(_sourceDt, dgvList)
                        Else
                            _tagetDtIngRowIndex = _tagetDtIngRowIndex + 1
                        End If

                    End If

                Else
                    CalVolume(stockCode, stockName)
                End If

            End If

        Catch ex As Exception
            MsgBox(ex.ToString, MsgBoxStyle.Exclamation)
        End Try
    End Sub

    Private Sub CalVolume(ByVal stockCode As String, ByVal stockName As String)
        Dim dr As DataRow

        With _sourceDt

            dr = .NewRow

            dr("STOCK_CODE") = stockCode
            dr("STOCK_NAME") = stockName

            For i As Integer = 0 To UBound(modDataTable.opt10059_Cal)
                dr(modDataTable.opt10059_Cal(i) & "합최저점") = _xmlDt.Compute("MIN(" & modDataTable.opt10059_Cal(i) & "합)", String.Empty)
                dr(modDataTable.opt10059_Cal(i) & "합최고점") = _xmlDt.Compute("MAX(" & modDataTable.opt10059_Cal(i) & "합)", String.Empty)
                dr(modDataTable.opt10059_Cal(i) & "금액최저점") = _xmlDt.Compute("MIN(" & modDataTable.opt10059_Cal(i) & "금액합)", String.Empty)
                dr(modDataTable.opt10059_Cal(i) & "금액최고점") = _xmlDt.Compute("MAX(" & modDataTable.opt10059_Cal(i) & "금액합)", String.Empty)
                dr(modDataTable.opt10059_Cal(i) & "분산합비율") = CalDistribution(_xmlDt.Rows(0).Item(modDataTable.opt10059_Cal(i) & "합"), _
                                                                                       _xmlDt.Compute("MIN(" & modDataTable.opt10059_Cal(i) & "합)", String.Empty), _
                                                                                        _xmlDt.Compute("MAX(" & modDataTable.opt10059_Cal(i) & "합)", String.Empty))
                dr(modDataTable.opt10059_Cal(i) & "분산금액비율") = CalDistribution(_xmlDt.Rows(0).Item(modDataTable.opt10059_Cal(i) & "금액합"), _
                                                                                   _xmlDt.Compute("MIN(" & modDataTable.opt10059_Cal(i) & "금액합)", String.Empty), _
                                                                                  _xmlDt.Compute("MAX(" & modDataTable.opt10059_Cal(i) & "금액합)", String.Empty))
            Next

            Dim maxPriceQty As Integer

            For i As Integer = 0 To UBound(modDataTable.opt10059_Cal)
                If modDataTable.opt10059_Cal(i) = "개인투자자" Then Continue For
                If modDataTable.opt10059_Cal(i) = "기관계" Then Continue For

                If maxPriceQty = 0 Then
                    maxPriceQty = dr(modDataTable.opt10059_Cal(i) & "금액최고점")
                    dr("JUDO_SERUK") = modDataTable.opt10059_Cal(i)
                Else
                    If maxPriceQty < dr(modDataTable.opt10059_Cal(i) & "금액최고점") Then
                        maxPriceQty = dr(modDataTable.opt10059_Cal(i) & "금액최고점")
                        dr("JUDO_SERUK") = modDataTable.opt10059_Cal(i)
                    End If
                End If
            Next

            .Rows.Add(dr)

        End With
    End Sub
#End Region

    'Dim sysDate As String = CDateTime.FormatDate(Now.Date)

    '        If File.Exists("C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & ".xml") Then
    '            If File.Exists("C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & ".xsd") = False Then Exit Sub
    '            My.Computer.FileSystem.RenameFile("C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & ".xml", _
    '                                              "C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & "_" & sysDate & ".xml")
    '            My.Computer.FileSystem.RenameFile("C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & ".xsd", _
    '                                              "C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & "_" & sysDate & ".xsd")

    '        End If

    '        _xmlDt.TableName = lblStockCode.Text & "_" & lblStockName.Text
    '        _xmlDt.WriteXml("C:\Xml2\" & _xmlDt.TableName & ".xml")
    '        _xmlDt.WriteXmlSchema("C:\Xml2\" & _xmlDt.TableName & ".xsd")

    '        CalVolume(lblStockCode.Text, lblStockName.Text)

    '        _clsCallOpt.LastDate = ""

    '        If _tagetDtIngRowIndex = _tagetDtRowCount Then
    '            _clsFunc.DataTableMappingToDataGridView(_sourceDt, dgvList)
    '        Else
    '            _tagetDtIngRowIndex = _tagetDtIngRowIndex + 1
    '            GetXmlDataAnalysis(Trim(_tagetDt.Rows(_tagetDtIngRowIndex).Item("STOCK_CODE").ToString()), Trim(_tagetDt.Rows(_tagetDtIngRowIndex).Item("STOCK_NAME").ToString()))
    '        End If

    Private Function CalDistribution(ByVal value As Long, ByVal minValue As Long, ByVal MaxValue As Long) As Integer
        If MaxValue = 0 Then Return 0
        If (MaxValue - minValue) = 0 Then Return 0

        Return CInt(Math.Abs(((value - minValue) / (MaxValue - minValue)) * 100))
    End Function

    Private Sub btnJukCondition_Click(sender As Object, e As EventArgs) Handles btnJukCondition.Click
        If cboCondition.Text = "주도세력" Then
            For i As Integer = _sourceDt.Rows.Count - 1 To 0 Step -1
                If _sourceDt.Rows(i).Item(Trim(_sourceDt.Rows(i).Item("JUDO_SERUK")) & "분산금액비율") < nudGaInValue.Value Then
                    _sourceDt.Rows.RemoveAt(i)
                End If
            Next
        Else
            For i As Integer = _sourceDt.Rows.Count - 1 To 0 Step -1
                If _sourceDt.Rows(i).Item(cboCondition.Text & "분산금액비율") < nudGaInValue.Value Then
                    _sourceDt.Rows.RemoveAt(i)
                End If
            Next
        End If

        _clsFunc.DataTableMappingToDataGridView(_sourceDt, dgvList)

    End Sub

    Private Sub OnEventCombineOpt5981(ByVal dt As DataTable)
        If _xmlDt Is Nothing = False Then
            _xmlDt.Reset()
        End If

        Dim sysTime As String = Now.Hour & Now.Minute
        Dim sysDate As String = CDateTime.FormatDate(Now.Date)

        If sysDate = Trim(dt.Rows(0).Item("일자")) Then
            If sysTime < "1800" Then
                dt.Rows.RemoveAt(0)
            End If
        End If

        _xmlDt = dt.Copy

        If File.Exists("C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & ".xml") Then
            If File.Exists("C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & ".xsd") = False Then Exit Sub
            My.Computer.FileSystem.RenameFile("C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & ".xml", _
                                               lblStockCode.Text & "_" & lblStockName.Text & "_" & sysDate & ".xml")
            My.Computer.FileSystem.RenameFile("C:\Xml2\" & lblStockCode.Text & "_" & lblStockName.Text & ".xsd", _
                                              lblStockCode.Text & "_" & lblStockName.Text & "_" & sysDate & ".xsd")

        End If

        _xmlDt.TableName = lblStockCode.Text & "_" & lblStockName.Text
        _xmlDt.WriteXml("C:\Xml2\" & _xmlDt.TableName & ".xml")
        _xmlDt.WriteXmlSchema("C:\Xml2\" & _xmlDt.TableName & ".xsd")

        CalVolume(lblStockCode.Text, lblStockName.Text)

        If _tagetDtIngRowIndex = _tagetDtRowCount Then
            _clsFunc.DataTableMappingToDataGridView(_sourceDt, dgvList)
        Else
            _tagetDtIngRowIndex = _tagetDtIngRowIndex + 1
            DisplayTagetDtIng()
            GetXmlDataAnalysis(Trim(_tagetDt.Rows(_tagetDtIngRowIndex).Item("STOCK_CODE").ToString()), Trim(_tagetDt.Rows(_tagetDtIngRowIndex).Item("STOCK_NAME").ToString()))
        End If

    End Sub


    Private Sub ucVolumeBasicAnalysis_Disposed(sender As Object, e As EventArgs) Handles Me.Disposed
        RemoveHandler _clsCombineCallOpt.OnEventCombineOpt5981, AddressOf OnEventCombineOpt5981
        RemoveHandler _clsCombineCallOpt.OnEventCombineOpt5981, AddressOf OnEventCombineOpt5981
    End Sub

    Private Sub ucVolumeBasicAnalysis_Load(sender As Object, e As EventArgs) Handles Me.Load

      AddHandler _clsCombineCallOpt.OnEventCombineOpt5981, AddressOf OnEventCombineOpt5981

    End Sub
End Class