'Imports PaikRichStock.Common

'Public Class frmFavStockModify
'    Private _ds As DataSet

'    Sub New(ByVal ds As DataSet)

'        ' 이 호출은 Windows Form 디자이너에 필요합니다.
'        InitializeComponent()

'        ' InitializeComponent() 호출 뒤에 초기화 코드를 추가하십시오.
'        _ds = ds
'    End Sub


'    Public Enum HangulCategory
'        한글아님
'        한글완성
'        한글자모
'        한글초성
'        한글중성
'        한글종성
'        고어자모
'    End Enum

'    Private _foundNonRow As Integer = -1
'    Private _foundExeRow As Integer = 0

'    Private Sub frmFavStockModify_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
'        SetStockList()
'        GetFavStock()
'    End Sub

'    Private Enum SpIndex
'        StockName
'        StockCode
'    End Enum


'    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
'    End Sub

'    Private Sub SetStockList()
'        Dim dr As DataRow
'        Dim row As Integer = 0

'        spList.ActiveSheet.ClearRange(0, 0, spList.ActiveSheet.RowCount, spList.ActiveSheet.ColumnCount, False)

'        With spList.ActiveSheet
'            For Each dr In _ds.Tables("StockList").Rows
'                If .RowCount - 1 <= row Then .RowCount = .RowCount + 1

'                .Cells(row, SpIndex.StockName).Text = Trim(dr("STOCK_NAME").ToString())
'                .Cells(row, SpIndex.StockCode).Text = Trim(dr("STOCK_CODE").ToString())

'                row = row + 1
'            Next
'        End With

'    End Sub

'    Private Sub GetFavStock()
'        Dim ds As DataSet, dr As DataRow
'        Dim row As Integer = 0
'        Dim dv As DataView

'        dv = New DataView(_ds.Tables("StockList"))

'        Common.dbConn.Open()

'        ds = dbConn.GetDataTableSp("p_Fav01Query")

'        If ds.Tables(0).Rows.Count < 1 Then
'            ds.Reset()
'            Common.dbConn.Close()
'            Exit Sub
'        End If

'        With spList0.ActiveSheet
'            For Each dr In ds.Tables(0).Rows
'                If .RowCount - 1 <= row Then .RowCount = .RowCount + 1

'                .Cells(row, SpIndex.StockCode).Text = Trim(dr("FAVST_CODE").ToString())

'                dv.RowFilter = String.Format("STOCK_CODE = '{0}'", Trim(dr("FAVST_CODE").ToString()))

'                For Each drRowView As DataRowView In dv
'                    .Cells(row, SpIndex.StockName).Text = Trim(drRowView("STOCK_NAME").ToString())
'                Next

'                row = row + 1

'            Next
'        End With

'        ds.Reset()

'        Common.dbConn.Close()
'    End Sub

'    Private Sub spList_CellDoubleClick(ByVal sender As System.Object, ByVal e As FarPoint.Win.Spread.CellClickEventArgs) Handles spList.CellDoubleClick
'        If Trim(spList.ActiveSheet.Cells(e.Row, SpIndex.StockCode).Text) <> "" Then
'            For row As Integer = 0 To spList0.ActiveSheet.RowCount - 1
'                If Trim(spList0.ActiveSheet.Cells(row, SpIndex.StockCode).Text) = "" Then
'                    spList0.ActiveSheet.Cells(row, SpIndex.StockCode).Text = Trim(spList.ActiveSheet.Cells(e.Row, SpIndex.StockCode).Text)
'                    spList0.ActiveSheet.Cells(row, SpIndex.StockName).Text = Trim(spList.ActiveSheet.Cells(e.Row, SpIndex.StockName).Text)
'                    Exit Sub
'                End If
'            Next
'        End If
'    End Sub

'    Private Sub btnStored_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnStored.Click
'        StoreRecord()
'    End Sub

'#Region " StoreRecord                                       | 해당 리스트를 저장한다. "
'    Private Sub StoreRecord()

'        Dim arrParam As New ArrayParam
'        Dim intNewMaterId As Integer = 0
'        Dim ix As Integer = 0

'        Try
'            With arrParam
'                .Clear()
'                .Add("@FAVST_GID", 1, OleDb.OleDbType.Integer, ParameterDirection.Input)
'            End With

'            Common.dbConn.ExecuteNonQuery("p_Fav02AllDel", arrParam)

'            For i As Integer = 0 To spList0.ActiveSheet.RowCount - 1
'                If Trim(spList0.ActiveSheet.Cells(i, SpIndex.StockCode).Text) = "" Then Exit For

'                With arrParam
'                    .Clear()
'                    .Add("@FAVST_ID", i + 1, OleDb.OleDbType.Integer, ParameterDirection.Input)
'                    .Add("@FAVST_GID", 1, OleDb.OleDbType.Integer, ParameterDirection.Input)
'                    .Add("@FAVST_CODE", Trim(spList0.ActiveSheet.Cells(i, SpIndex.StockCode).Text), OleDb.OleDbType.VarChar, ParameterDirection.Input)
'                    .Add("@FAVST_TEXT", "", OleDb.OleDbType.VarChar, ParameterDirection.Input)
'                End With

'                Common.dbConn.ExecuteNonQuery("p_Fav02Add", arrParam)

'            Next

'            MsgBox(" 입력이 완료되었습니다. ", MsgBoxStyle.Information)

'            GetFavStock()
'        Catch ex As Exception
'            MsgBox(ex.ToString(), MsgBoxStyle.Information)
'        End Try

'        If Common.dbConn._sqlCon.State = ConnectionState.Open Then
'            Common.dbConn.Close()
'        End If

'    End Sub
'#End Region

'#Region "IsHangul                   | 한글 여부 반환 |"
'    Private Function IsHangul(ByVal c As Char) As Boolean
'        Return GetHangulCategory(c) = HangulCategory.한글아님
'    End Function

'    Private Function IsHangul2(ByVal c As Char) As Boolean
'        Return GetHangulCategory(c) = HangulCategory.한글완성
'    End Function

'    Private Function GetHangulCategory(ByVal c As Char) As Integer
'        Dim code As Integer = AscW(c)

'        If code >= &HAC00 And code <= &HD7AF Then
'            Return HangulCategory.한글완성
'        End If

'        If code >= &H3130 And code <= &H318F Then
'            Return HangulCategory.한글자모
'        End If

'        Return HangulCategory.한글아님

'    End Function

'    Private Function GetHangulCategory(ByVal s As String, ByVal index As Integer) As Integer
'        Return GetHangulCategory(s.Chars(index))
'    End Function
'#End Region


'#Region " STRUCTURE "
'    ' sheetIndex, searchString, caseSensitive, exactMatch, alternateSearch, 
'    ' useWildcards, includeCellText, includeNotes, includeTags, 
'    ' searchAsBlockRange, 
'    'startRowIndex, startColumnIndex, endRowIndex, endColumnIndex, foundRowIndex, foundColumnIndex
'    Public Structure SPREAD_SEARCH
'        Public SHEET_INDEX As Integer
'        Public SEARCH_STRING As String
'        Public CASE_SENSITIVE As Boolean
'        Public EXACT_MATCH As Boolean
'        Public ALTERNATE_SEARCH As Boolean
'        Public USEWILD_CARDS As Boolean
'        Public INCLUDE_CELLTEXT As Boolean
'        Public INCLUDE_NOTES As Boolean
'        Public INCLUDE_TAGS As Boolean
'        Public SEARCHAS_BLOCKRANGE As Boolean
'        Public STARTROW_INDEX As Integer
'        Public STARTCOLUMN_INDEX As Integer
'        Public ENDROW_INDEX As Integer
'        Public ENDCOLUMN_INDEX As Integer
'    End Structure
'#End Region

'    Private Sub txtStockName_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtStockName.TextChanged
'        If Trim(txtStockName.Text) = "" Then Exit Sub

'        Dim findRow As Integer = 0
'        Dim findColumn As Integer = 0
'        Dim findRow2 As Integer = 0
'        Dim findColumn2 As Integer = 0

'        Dim spreadSearch As SPREAD_SEARCH

'        spreadSearch.SHEET_INDEX = 0
'        spreadSearch.SEARCH_STRING = Trim(txtStockName.Text)
'        spreadSearch.CASE_SENSITIVE = False
'        spreadSearch.EXACT_MATCH = False
'        spreadSearch.ALTERNATE_SEARCH = False
'        spreadSearch.USEWILD_CARDS = False
'        spreadSearch.INCLUDE_CELLTEXT = True
'        spreadSearch.INCLUDE_NOTES = False
'        spreadSearch.INCLUDE_TAGS = False
'        spreadSearch.SEARCHAS_BLOCKRANGE = True
'        If _foundNonRow = -1 Then
'            spreadSearch.STARTROW_INDEX = 0
'        Else
'            spreadSearch.STARTROW_INDEX = _foundNonRow
'        End If

'        spreadSearch.STARTCOLUMN_INDEX = SpIndex.StockName
'        spreadSearch.ENDROW_INDEX = spList.ActiveSheet.RowCount - 1
'        spreadSearch.ENDCOLUMN_INDEX = SpIndex.StockName

'        ' sheetIndex, searchString, caseSensitive, exactMatch, alternateSearch, useWildcards, includeCellText, includeNotes, includeTags, searchAsBlockRange, startRowIndex, startColumnIndex, endRowIndex, endColumnIndex, foundRowIndex, foundColumnIndex)
'        ' spNonExeList.Search(0, Trim(txtPatName.Text), False, False, False, False, True, False, False, False, _foundNonRow, 0, spNonExeList.ActiveSheet.RowCount - 1, 0, findRow, spIndex.PatName)
'        With spreadSearch
'            spList.Search(.SHEET_INDEX, .SEARCH_STRING, .CASE_SENSITIVE, .EXACT_MATCH, .ALTERNATE_SEARCH, .USEWILD_CARDS, _
'                                 .INCLUDE_CELLTEXT, .INCLUDE_NOTES, .INCLUDE_TAGS, .SEARCHAS_BLOCKRANGE, .STARTROW_INDEX, .STARTCOLUMN_INDEX, .ENDROW_INDEX, .ENDCOLUMN_INDEX, findRow, findColumn)
'        End With

'        If findRow = -1 Then
'            _foundNonRow = 0
'        Else
'            _foundNonRow = findRow
'        End If

'        spList.SetViewportTopRow(0, _foundNonRow)

'        'spExeList.Search(0, Trim(txtPatName.Text), False, False, False, False, True, False, False, False, _foundExeRow, 0, spExeList.ActiveSheet.RowCount - 1, 0, findRow2, spIndex.PatName)

'        '_foundExeRow = findRow2 + 1

'        'spExeList.SetViewportTopRow(0, _foundExeRow)
'    End Sub

'End Class