using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace Chart
{
    public partial class ucChart : UserControl
    {
        private clsChart _clsChart = new clsChart();
        private PaikRichStock.Common.ucMainStockVer2 _MainStock;
        private string _stockCode = "";
        System.Windows.Forms.DataVisualization.Charting.Chart _baseChart;        

        public PaikRichStock.Common.ucMainStockVer2 MainStock
        {
            set
            {
                _MainStock = value;

            }
        }
        
        public ucChart()
        {
            InitializeComponent();            

            //InitChart();
        }

        public void GetChartData(string stockCode)
        {            
            _clsChart.MainStock = _MainStock;
            _clsChart.GetOpt10081(stockCode);            
            _clsChart.OnEventReturn10081ResultDt += EventReturn10081ResultDt;            
        }

        private void InitChart()
        {

            _baseChart = new System.Windows.Forms.DataVisualization.Charting.Chart();            
            
            System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea1 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
            System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea2 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
            System.Windows.Forms.DataVisualization.Charting.Legend legend1 = new System.Windows.Forms.DataVisualization.Charting.Legend();
            System.Windows.Forms.DataVisualization.Charting.Series series1 = new System.Windows.Forms.DataVisualization.Charting.Series();
            System.Windows.Forms.DataVisualization.Charting.Series series2 = new System.Windows.Forms.DataVisualization.Charting.Series();
            System.Windows.Forms.DataVisualization.Charting.Series series3 = new System.Windows.Forms.DataVisualization.Charting.Series();
            
            chartArea1.Name = "ChartArea1";
            chartArea2.Name = "Volume";
                       
            _baseChart.ChartAreas.Clear();
            _baseChart.Series.Clear();
            _baseChart.ChartAreas.Add(chartArea1);
            _baseChart.ChartAreas.Add(chartArea2);
            
            //_baseChart.ChartAreas["Volume"].AlignWithChartArea = System.Windows.Forms.DataVisualization.Charting.al

            series1.ChartArea = "ChartArea1";
            series1.ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Candlestick;
            series1.Name = "캔들";
            series1.YValuesPerPoint = 4;
            series2.ChartArea = "ChartArea1";
            series2.ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.Line;            
            series2.Name = "라인";

            series3.ChartArea = "Volume";
            series3.Name = "거래량";

            _baseChart.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;
                       
            _baseChart.ChartAreas["ChartArea1"].AxisX.ScaleView.Position = _baseChart.ChartAreas["ChartArea1"].AxisX.Maximum;
            _baseChart.ChartAreas["ChartArea1"].CursorX.IsUserEnabled = true;
            _baseChart.ChartAreas["ChartArea1"].CursorX.IsUserSelectionEnabled = true;
            _baseChart.ChartAreas["ChartArea1"].AxisX.ScaleView.Zoomable = true;            
            _baseChart.ChartAreas["Volume"].CursorX.IsUserEnabled = true;
            _baseChart.ChartAreas["Volume"].CursorX.IsUserSelectionEnabled = true;
            _baseChart.ChartAreas["Volume"].AxisX.ScaleView.Zoomable = true;

            _baseChart.ChartAreas["ChartArea1"].InnerPlotPosition.Auto = true;
            _baseChart.ChartAreas["Volume"].InnerPlotPosition.Auto = true;

            _baseChart.ChartAreas["Volume"].AlignmentOrientation = System.Windows.Forms.DataVisualization.Charting.AreaAlignmentOrientations.Vertical;
            _baseChart.ChartAreas["Volume"].AlignmentStyle = System.Windows.Forms.DataVisualization.Charting.AreaAlignmentStyles.All;
            _baseChart.ChartAreas["Volume"].AlignWithChartArea = "ChartArea1";

            _baseChart.ChartAreas["ChartArea1"].Position.Auto = false;
            _baseChart.ChartAreas["ChartArea1"].Position.Height = 70;
            _baseChart.ChartAreas["ChartArea1"].Position.Width = 100;
            _baseChart.ChartAreas["ChartArea1"].Position.X = 0;
            _baseChart.ChartAreas["ChartArea1"].Position.Y = 0;

            _baseChart.ChartAreas["Volume"].Position.Auto = false;
            _baseChart.ChartAreas["Volume"].Position.Height = 30;
            _baseChart.ChartAreas["Volume"].Position.Width = 100;
            _baseChart.ChartAreas["Volume"].Position.X = _baseChart.ChartAreas["ChartArea1"].Position.X;
            _baseChart.ChartAreas["Volume"].Position.Y = _baseChart.ChartAreas["ChartArea1"].Position.X + _baseChart.ChartAreas["ChartArea1"].Position.Height + 10;
 
            _baseChart.Series.Add(series1);
            _baseChart.Series.Add(series2);
            _baseChart.Series.Add(series3);

            _baseChart.Series["캔들"].ToolTip = "#AXISLABEL";
            _baseChart.Series["캔들"].IsXValueIndexed = false;
            _baseChart.Series["캔들"].XValueType = ChartValueType.DateTime;

            _baseChart.Width = this.Width - 5;
            _baseChart.Height = this.Height - 5;
            this.Controls.Add(_baseChart);
            
            _baseChart.MouseClick += _baseChart_MouseClick;
            _baseChart.MouseMove += chart_MouseMove;
            _baseChart.MouseDown += _baseChart_MouseDown;
            _baseChart.AxisViewChanged += _baseChart_AxisViewChanged;
            _baseChart.MouseWheel += chData_MouseWheel;
        }        

        void _baseChart_AxisViewChanged(object sender, ViewEventArgs e)
        {
            ////_baseChart.ChartAreas["ChartArea1"].CursorX.SelectionStart



                
            ////_baseChart.ChartAreas["ChartArea1"].AxisY.Minimum = e.
            ////_baseChart.ChartAreas["ChartArea1"].AxisY.Maximum = 

            ////_baseChart.ChartAreas["Volume"].AxisY.Minimum = e.
            ////_baseChart.ChartAreas["Volume"].AxisY.Maximum = high + (high * 0.1);
            
        }

        private DataSet _ds;
        private int _month = 0;

        private void DisplayChart(DataSet ds, int month)
        {
            int pt = 0;

            DataView dv = new DataView(ds.Tables[0]);

            dv.Sort = "일자 asc";
            dv.RowFilter = "일자 >=" + DateTime.Now.AddMonths(-month).ToString("yyyyMMdd");

            int high = 0;
            int low = 0;
            _baseChart.Series["캔들"].Points.Clear();
            _baseChart.Series["거래량"].Points.Clear();

            foreach (DataRowView dr in dv)
            {
                if (low == 0)
                {
                    high = int.Parse(dr["고가"].ToString());
                }
                else
                {
                    if (high < int.Parse(dr["고가"].ToString()))
                    {
                        high = int.Parse(dr["고가"].ToString());
                    }
                }


                if (low == 0)
                {
                    low = int.Parse(dr["저가"].ToString());
                }
                else
                {
                    if (low > int.Parse(dr["저가"].ToString()))
                    {
                        low = int.Parse(dr["저가"].ToString());
                    }
                }

                _baseChart.Series["캔들"].Points.AddXY(dr["일자"], int.Parse(dr["고가"].ToString()));                
                _baseChart.Series["캔들"].Points[pt].YValues[1] = int.Parse(dr["저가"].ToString());
                _baseChart.Series["캔들"].Points[pt].YValues[2] = int.Parse(dr["시가"].ToString());
                _baseChart.Series["캔들"].Points[pt].YValues[3] = int.Parse(dr["현재가"].ToString());

                _baseChart.Series["거래량"].Points.AddXY(dr["일자"], double.Parse(dr["거래량"].ToString()));

                if (int.Parse(dr["시가"].ToString()) > int.Parse(dr["현재가"].ToString()))
                {
                    _baseChart.Series["캔들"].Points[pt].Color = System.Drawing.Color.Blue;
                }
                else
                {
                    _baseChart.Series["캔들"].Points[pt].Color = System.Drawing.Color.Red;
                }

                //baseChart.Series["캔들"].Points.AddXY()
                pt++;
            }

            //_baseChart.ChartAreas["ChartArea1"].AxisX.ScaleView.Zoom(2, 3);                        
            //_baseChart.ChartAreas["ChartArea1"].AxisX.ScrollBar.IsPositionedInside = true;

            _baseChart.ChartAreas["ChartArea1"].AxisY.Minimum = low - (low * 0.1);
            _baseChart.ChartAreas["ChartArea1"].AxisY.Maximum = high + (high * 0.1);
            _baseChart.ChartAreas["ChartArea1"].AxisX.IsLabelAutoFit = true;
        }

        private void EventReturn10081ResultDt(object sender, clsChart.ResultDtEventArgs e)
        {
            InitChart();
            //var matplotlib = new MatplotlibCS.MatplotlibCS(@"C:\Users\eunha.BUSANPAIK\AppData\Local\Programs\Python\Python35-32\python.exe", @"D:\RichStock\Chart\MatplotlibCS\matplotlib_cs.py");
            for (int i = 0; i < _baseChart.Series.Count; i++)
            {
                _baseChart.Series[i].Points.Clear();
            }

            DataSet ds = e.Data;

            _ds = ds;

            _month = 6;

            DisplayChart(ds, _month);

            ////_baseChart.ChartAreas["Volume"].Position.X = _baseChart.ChartAreas["ChartArea1"].Position.X;
            ////_baseChart.ChartAreas["Volume"].Position.Y = _baseChart.ChartAreas["ChartArea1"].Position.X + _baseChart.ChartAreas["ChartArea1"].Position.Height + 10;
        }

        Point? prevPosition = null;
        ToolTip tooltip = new ToolTip();

        void chart_MouseMove(object sender, MouseEventArgs e)
        {
            //if (e.Button == System.Windows.Forms.MouseButtons.Right)
            //{
            //    _baseChart.ChartAreas["ChartArea1"].AxisX.ScaleView.ZoomReset();
            //    return;
            //}

            Point mousePoint = new Point(e.X, e.Y);
                        
            _baseChart.ChartAreas["ChartArea1"].CursorX.SetCursorPixelPosition(mousePoint, true);
            _baseChart.ChartAreas["ChartArea1"].CursorY.SetCursorPixelPosition(mousePoint, true);
            
            var pos = e.Location;
            if (prevPosition.HasValue && pos == prevPosition.Value)
                return;
            tooltip.RemoveAll();
            prevPosition = pos;
            var results = _baseChart.HitTest(pos.X, pos.Y, false,
                                         ChartElementType.PlottingArea);
            foreach (var result in results)
            {
                if (result.ChartElementType == ChartElementType.PlottingArea)
                {                    
                    var xVal = result.ChartArea.AxisX.PixelPositionToValue(pos.X);
                    double yVal = result.ChartArea.AxisY.PixelPositionToValue(pos.Y);                    

                    tooltip.Show(Math.Round(yVal,2).ToString(), _baseChart,
                                 pos.X, pos.Y - 15);
                }
            }
        }

        ////private void chart_GetToolTipText(object sender, System.Windows.Forms.DataVisualization.Charting.ToolTipEventArgs e)
        ////{

        ////          // Check selected chart element and set tooltip text
        ////    switch(    e.HitTestResult.ChartElementType )
        ////    {
        ////        case ChartElementType.Axis:
        ////            e.Text = e.HitTestResult.Axis.Name;
        ////            break;                
        ////        case ChartElementType.DataPoint:
        ////            e.Text = "Data Point " + e.HitTestResult.PointIndex.ToString();
        ////            break;
        ////        case ChartElementType.Gridlines:
        ////            e.Text = "Grid Lines";
        ////            break;             
        ////        case ChartElementType.PlottingArea:
        ////            e.Text = e.HitTestResult;
        ////            break;
        ////        case ChartElementType.StripLines:
        ////            e.Text = "Strip Lines";
        ////            break;
        ////        case ChartElementType.TickMarks:
        ////            e.Text = "Tick Marks";
        ////            break;
        ////        case ChartElementType.Title:
        ////            e.Text = "Title";
        ////            break;
        ////    }
        ////}        


        void _baseChart_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right)
            {
                _baseChart.ChartAreas["ChartArea1"].AxisX.ScaleView.ZoomReset();
            }
        }

        void _baseChart_MouseClick(object sender, MouseEventArgs e)
        {
            
            //else if (e.Button == System.Windows.Forms.MouseButtons.Left)
            //{
            //    var pos = e.Location;
            //    if (prevPosition.HasValue && pos == prevPosition.Value)
            //        return;
            //    tooltip.RemoveAll();
            //    prevPosition = pos;
            //    var results = _baseChart.HitTest(pos.X, pos.Y, false,
            //                                 ChartElementType.PlottingArea);
            //    foreach (var result in results)
            //    {
            //        if (result.ChartElementType == ChartElementType.PlottingArea)
            //        {
            //            //var xVal = result.Series.Points[result.PointIndex].XValue;
            //            var yVal = Math.Round(result.ChartArea.AxisY.PixelPositionToValue(pos.Y),2);

            //            tooltip.Show(yVal.ToString(), _baseChart,
            //                         pos.X, pos.Y - 15);
            //        }
            //    }
            //}            
        }
        private void ucChart_SizeChanged(object sender, EventArgs e)
        {
            if (_baseChart != null)
            {
                _baseChart.Width = this.Width - 5;
                _baseChart.Height = this.Height - 5;
            }            
        }
        private void chData_MouseWheel(object sender, MouseEventArgs e)
        {
            try
            {
                if (e.Delta < 0)
                {
                    _baseChart.ChartAreas[0].AxisX.ScaleView.ZoomReset();
                    _baseChart.ChartAreas[0].AxisY.ScaleView.ZoomReset();
                }

                if (e.Delta > 0)
                {
                    double xMin = _baseChart.ChartAreas[0].AxisX.ScaleView.ViewMinimum;
                    double xMax = _baseChart.ChartAreas[0].AxisX.ScaleView.ViewMaximum;
                    double yMin = _baseChart.ChartAreas[0].AxisY.ScaleView.ViewMinimum;
                    double yMax = _baseChart.ChartAreas[0].AxisY.ScaleView.ViewMaximum;

                    double posXStart = _baseChart.ChartAreas[0].AxisX.PixelPositionToValue(e.Location.X) - (xMax - xMin) / 4;
                    double posXFinish = _baseChart.ChartAreas[0].AxisX.PixelPositionToValue(e.Location.X) + (xMax - xMin) / 4;
                    double posYStart = _baseChart.ChartAreas[0].AxisY.PixelPositionToValue(e.Location.Y) - (yMax - yMin) / 4;
                    double posYFinish = _baseChart.ChartAreas[0].AxisY.PixelPositionToValue(e.Location.Y) + (yMax - yMin) / 4;

                    _baseChart.ChartAreas[0].AxisX.ScaleView.Zoom(posXStart, posXFinish);
                    _baseChart.ChartAreas[0].AxisY.ScaleView.Zoom(posYStart, posYFinish);
                }
            }
            catch { }
        }

        private void btnPrev_Click(object sender, EventArgs e)
        {
            if(_ds != null)
            {
                _month += 3;

                DisplayChart(_ds, _month);
            }
            
        }

        private void btnNext_Click(object sender, EventArgs e)
        {
            if (_ds != null)
            {
                if(_month - 3 > 0)
                {
                    _month -= 3;
                }                

                DisplayChart(_ds, _month);
            }
        }
    }
}
